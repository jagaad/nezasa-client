swagger: '2.0'
info:
  version: '1.0'
  title: Planner API
  description: |
    # Introduction
    The Planner API provides RESTful endpoints for all components and itineraries available within our system.
    JSON is returned by all API responses including errors.

    ## Doc Version
    Last Updated: 2024-11-06

    ## Compression
    All endpoints in the REST API support gzip compression for both request and response payloads. Most client side
    frameworks have built-in support for gzip encoding as well. Compressing API payloads improves an application's
    performance and reduces bandwidth consumption by sending and receiving smaller payloads.

    ## Localization
    The localization parameters are determined through a series of checks on the existing cookies
    (which are part of the request) as well as the default values defined by underlying distribution
    channel configuration.

    ### Language
    The steps to determine the language parameter are as follows.

    1. The "lang" HTTP-Cookie is present together with the languages defined in the "Accept-Language" header
       are concatenated together to form a list of language code. The language from the HTTP-Cookie is
       first in the list since it takes precedence over the "Accept-Language" header.

    2. The list of languages from step (1) is checked against the distribution channel's default communication
       language as well as the list of languages supported by this distribution channel. The first language
       in the list from step (1) which satisfies the condition of being supported by the distribution channel
       is taken as the localization language parameter to use.

    3. If none of the languages from step (1) satisfies any of the the distribution channel's supported languages,
       then we either take the first language from the list from step (1) or we default to EN.

    ### Currency
    The currency is determined similarly to how the language localization parameter is set. First the
    "currency" Cookie is checked and if a value exist, we verify if this value is supported by the
    distribution channel. If it is supported, then the value from the currency Cookie is used, otherwise the
    default user currency value configured on the distribution channel is taken.

    If no currency Cookie exists, then we try looking up the currency using the first language in the
    "Accept-Language" header. If this currency is supported by the distribution channel, then it is taken as
    the user currency, otherwise, we simply default to the user currency configured on the distribution channel.

    ## Timeouts
    The Planner API has a general request timeout of 30 seconds. If a request cannot be served within this time a
    HTTP error 503 is returned and the connection is closed by the server.

    ## Error Handling
    Nezasa uses conventional HTTP response codes to indicate the success or failure of an API request. In general,
    codes in the 2xx range indicate success, codes in the 4xx range indicate an error that failed given the
    information provided (e.g., a required parameter was omitted or is in the wrong format), and codes in the 5xx
    range indicate an error with Nezasaâ€™s servers.

    ## Host
    The host api.tripbuilder.app is used as placeholder in this documentation. The actual host to be used may be
    a white-labelled domain of your TripBuilder setup.

    ## FAQ

    ### Offer Searches

    #### Are offer searches always live searches, i.e., they will trigger searches on the third-party supplier APIs?

    Generally yes. Any offer search is a live search to the connected supplier systems. The only exception
    is the Nezasa inventory with the offline products. Whenever supported by the API of the supplier system,
    the search parameters used in the Planner API will be forwarded to the supplier API in order to improve
    the content quality. This is especially relevant for APIs that only return a limited amount of results. For
    example flight GDS only return up to 100 results.

    #### What's the response time of offer searches?

    How fast an offer search ultimately performs depends mainly on the connected suppliers and how many
    connected suppliers have been configured. The Nezasa backend will wait for all suppliers to return their
    offers before return a response to the planner API client.

    #### Why doesn't the API provide any sorting parameters for offers?

    The main reason for this is the way how supplier systems work. They return all offers at once
    (no paging) and it always causes a waiting time. As a consequence, the impact on usability
    for the client and ultimately the user is considerable. That's why the API doesn't provide any sorting.
    It is recommended that the API client performs the sorting.

    ## Change History

    | API Version | Docs Version | Changes                                                                                                                                      |
    |-------------|--------------|----------------------------------------------------------------------------------------------------------------------------------------------|
    | 1.0         | 01.04.2021   | <ul><li>Migrated to ReDoc for doc generation</li><li>Improved quality and quality of API doc</li></ul>                                       |
    | 1.0         | 27.01.2021   | Extended transport offer search with new filter criteria for max. stop overs, price range, max travel duration, incl./excl. by airline code. |
    | 1.0         | 25.11.2021   | Added new endpoint for importing a PNR                                                                                                       |
    | 1.0         | 03.12.2021   | Added new endpoint for importing a PNR                                                                                                       |
    | 1.0         | 22.12.2021   | Added new "baseServiceType" filter for filtering base service offers                                                                         |
    | 1.0         | 15.02.2022   | Added field "allocatedPax" to Itinerary                                                                                                      |
    | 1.0         | 06.04.2022   | Added field "departureLocation" to Itinerary                                                                                                 |
    | 1.0         | 06.04.2022   | Added rental car station data to rental car offers and components                                                                            |
    | 1.0         | 09.05.2022   | Added field "amenityReferences" to accommodation update request                                                                              |
    | 1.0         | 09.05.2022   | Added field "groupedAmenityOffers" to accommodation, activity and transfer offer responses                                                   |
    | 1.0         | 27.06.2022   | Added field "thumbnailUrl" to rental car components                                                                                          |
    | 1.0         | 26.07.2022   | Added field "surcharges" to Itinerary                                                                                                        |
    | 1.0         | 26.07.2022   | Added field "externallyPaidCharges" to accommodation components                                                                              |
    | 1.0         | 29.07.2022   | Added object "fareFamily" to connection segments of transport offers                                                                         |
    | 1.0         | 30.08.2022   | Added new endpoint /itinerary/${id}/duplicate                                                                                                |
    | 1.0         | 30.08.2022   | Added fields "numAdults" and "childAges" to Occupancy Based Activity update Request                                                          |
    | 1.0         | 04.09.2022   | Added field "officialRating" to accommodation offer                                                                                          |
    | 1.0         | 20.09.2022   | Improved and extended response of endpoint /itinerary/${id}/recheck                                                                          |
    | 1.0         | 31.03.2023   | Added new endpoint for deletion of activity ad-hoc components                                                                                |
    | 1.0         | 30.05.2023   | Added endpoints for managing transport ad-hoc components                                                                                     |
    | 1.0         | 06.08.2024   | Added endpoints for managing accommodation ad-hoc components                                                                                 |
    | 1.0         | 07.08.2024   | Added carrier, equipment, operating carrier to simple transport component segment                                                            |
    | 1.0         | 20.08.2024   | Extended hotel facts to return the id in addition to the name                                                                                |
    | 1.0         | 27.08.2024   | Added field "unitSalesPrice" to SimpleTransportComponent                                                                                     |
    | 1.0         | 17.09.2024   | Added fields to activity insert/update endpoints to support the Activity V2 Flow (i.e. manually selecting tickets and their quantities)      |
    | 1.0         | 19.09.2024   | Added language attribute to Itinerary                                                                                                        |
    | 1.0         | 30.09.2024   | Added price-probing endpoint as well as requests and responses                                                        |
    | 1.0         | 22.10.2024   | Added support for wildcard tags in itinerary include parameter                                      |
    | 1.0         | 23.10.2024   | Added support returning the travel agency ref id as part of the ItineraryResponse                                      |
    | 1.0         | 06.11.2024   | Added activityType for ad hoc activities                                     |

    # Authentication
    Authenticate your account when using the API by including your secret API key in the request.
    Your API keys carry many privileges, so be sure to keep them secret! Do not share your secret API keys
    in publicly accessible areas such as GitHub, client-side code, and so forth. Authentication to the API
    is performed via HTTP Basic Auth. Provide your account ID as the basic auth username and the API secret
    as the basic auth password.

    Authentication is not required for requests on public itineraries when using an IBE domain.

    All API requests must be made over HTTPS.
  contact:
    email: support@nezasa.com
    url: 'https://nezasa.com/contact-us/'
  x-logo:
    url: 'https://nezasa.com/wp-content/uploads/2020/02/nezasa-logo-e1583851738373.png'
host: api.tripbuilder.app
schemes:
  - https
securityDefinitions:
  basicAuth:
    type: basic
# To apply Basic auth to the whole API:
security:
  - basicAuth: []
basePath: /planner/v1/itineraries
tags:
  - name: Itinerary
    description: |
      Operations that affect the itinerary overall, and not a specific component type.
  - name: Modules
    description: |
      Modules are pre-configured pre-programs or extensions that can be added to an itinerary. The underlying itinerary template needs to be of
      type "pre-main-post".
  - name: Hotels
    description: |
      Operations related to accommodations (hotels).
  - name: Activities
    description: |
      Operations related to activities.
  - name: Rental Cars
    description: |
      Operations related to rental cars.
  - name: Transports
    x-displayName: Transports (Flights, Buses, Trains)
    description: |
      Operations related to transports, i.e., flight, bus, train.
  - name: Transfers
    description: |
      Operations related to transfers.
  - name: Base Services
    description: |
      Operations related to base servcies.
  - name: Ad-Hoc
    x-displayName: Ad-hoc Components
    description: |
      Ad-hoc components are components that only live in this very itinerary. They come in different types
      (generic, activitiy, ...) and can be used to handle special requests of customers that can not be
      satisfied with products connected third-party supply or products managed in the offline inventory.
    externalDocs:
      url: https://support.nezasa.com/en/how-to-add-an-activity-ad-hoc
  - name: Flights
    x-displayName: Flights (deprecated)
parameters:
  versionParam:
    name: version
    description: Version number of the API
    in: path
    type: string
    required: true
  itineraryIdParam:
    name: itineraryId
    description: The ID of the itinerary
    in: path
    type: string
    required: true
  moduleIdParam:
    name: moduleId
    description: The ID of the itinerary module
    in: path
    type: string
    required: true
  legIdParam:
    name: legId
    description: |
      The unique ID identifying the leg for the given itinerary.
      See '#/definitions/Leg'
    in: path
    type: string
    required: true
  componentRefIdParam:
    name: componentRefId
    description: The ID of the component
    in: path
    type: string
    required: true
  includeParam:
    name: include
    description: |
      The include parameter is a comma-delimited list of include tags that are used to control
      which product attributes are contained in the response By using different include parameter
      the caller can define the granularity of the response attributes.

      For example it can be controlled whether only the base component data (e.g. date, sales price, name) or also
      extended product data (e.g. room categories, amenities, activity segments) should be returned to the caller.

      Please note that if includes are specified more information needs to be fetched (lookup of product specific data)
      which may result in different response times.

      The current set of supported include tags are the following (e.g. ?include=accommodation.tags,activity.pictures)

        - accommodation.amenities
        - accommodation.tags
        - accommodation.contactDetails
        - accommodation.location
        - activity.segments
        - activity.amenities
        - activity.serviceCategories
        - activity.tourAttributes
        - activity.infoSections
        - activity.tags
        - activity.pictures
        - activity.paxDetails
        - transfer.amenities
        - transfer.serviceCategory
        - transfer.tags
        - transfer.type
        - transfer.private
        - transfer.shortDesc
        - rentalCar.acriss
        - rentalCar.amenities
        - rentalCar.pictures
        - rentalCar.tags
        - itinerary.paxDetails
        - itinerary.allocatedPax
        - itinerary.customerContact
        - itinerary.agency
        - itinerary.cancellation
        - itinerary.areaDescriptions
        - itinerary.tourAttributes
        - itinerary.infoSections
        - module.tourAttributes
        - module.infoSections

      In order to make querying a set of itinerary attributes simpler, it is possible to use a wildcard
      instead of an attribute name. e.g. (?include=accommodation.*)

        - accommodation.*
        - activity.*
        - transfer.*
        - rentalCar.*
        - itinerary.*
        - module.*

      and if you just want to include everything, you can simply specify the include param as follows.

        - ?include=all

    in: query
    type: string
    required: false
  componentSourceParam:
    name: componentSource
    description: |
      Identifier of the provider for this component
    in: path
    type: string
    required: true
  bookingIdParam:
    name: bookingId
    description: |
      The unique ID identifying the booking in the external system.
    in: path
    type: string
    required: true
paths:
  /price-probing:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/includeParam'
      - name: request
        in: body
        required: true
        schema:
          $ref: '#/definitions/ItineraryPriceProbingRequest'
    post:
      summary: Create an itinerary without persisting it to the DB (BETA)
      description: |
        This action creates an itinerary with the provided parameters in request
        without persisting it in the DB. The main usage for this is price probing, the client calls
        this endpoint to retrieve price info with different configurations.
      tags:
        - Itinerary
        - Beta
      produces:
        - application/json
      responses:
        200:
          description: |
            Returns an ItineraryPriceProbingResponse containing the pricing information for the itinerary
          schema:
            $ref: '#/definitions/ItineraryPriceProbingResponse'

  /{itineraryId}:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
      - $ref: '#/parameters/includeParam'
    get:
      summary: Get itinerary
      description: |
        Get the itinerary identified by ID.

        Use to retrieve the itinerary uniquely identified by the given ID.
      tags:
        - Itinerary
      produces:
        - application/json
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        404:
          description: The itinerary could not be found
          schema:
            $ref: '#/definitions/ProblemResponse'
    delete:
      summary: Delete itinerary
      description: |
        Deletes the itinerary identified by ID.

        Deletion of an itinerary means that its status is set to 'Deleted'. The itinerary will still
        exist in the database for a pre-defined period until it is completely removed (unrevokably).

        NOTE: Authentication is always enforced for this endpoint.
      tags:
        - Itinerary
      produces:
        - application/json
      responses:
        204:
          description: The itinerary was deleted successfully.
        404:
          description: The itinerary could not be found
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/title:
    put:
      summary: Change title
      description: |
        Changes the title on the itinerary identified by the given ID.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: the new title of the itinerary
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangeItineraryTitleRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            withe the new title and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        404:
          description: If no itinerary could be found
          schema:
            $ref: '#/definitions/ProblemResponse'
        400:
          description: If changing the title fails for any other reason than an internal error
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/duplicate:
    post:
      summary: Duplicates this itinerary
      description: |
        Creates a duplicate of this itinerary with a ID. The duplicate contains
        all the components from the original itinerary.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: the new title of the itinerary
          in: body
          required: true
          schema:
            $ref: '#/definitions/DuplicateItineraryRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the duplicated itinerary with the
            new IDs and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        404:
          description: If no itinerary could be found
          schema:
            $ref: '#/definitions/ProblemResponse'
        400:
          description: If duplicating the itinerary fails for any other reason than an internal error
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/start-date:
    post:
      summary: Change start date
      description: Changes the start date on the itinerary identified by the given ID.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: startDate
          description: the new start date of the itinerary
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangeItineraryStartDateRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            starting at the new {startDate} and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        404:
          description: If no itinerary could be found
          schema:
            $ref: '#/definitions/ProblemResponse'
        400:
          description: If changing the start date fails for any other reason than an internal error
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/legs/{legId}/stop/nights:
    post:
      summary: Change stop duration
      description: |
        Changes the duration for the stop belonging to the given leg.

        This call will either increase or decrease the number of nights for the stop contained within
        the given leg.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/legIdParam'
        - name: nights
          description: The number of nights to use for the new duration
          in: body
          required: true
          schema:
            $ref: '#/definitions/ChangeStopDurationRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            starting at the new {startDate} and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        404:
          description: If no itinerary could be found
          schema:
            $ref: '#/definitions/ProblemResponse'
        400:
          description: If changing the duration for the stop fails for any reason
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/undo:
    post:
      summary: Undo last change
      description: |
        Reverts the itinerary to the most recent snapshot.

        This call will retrieve the itinerary identified by 'refId' to is most recent snapshot.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly reverted Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        404:
          description: If no itinerary could be found
          schema:
            $ref: '#/definitions/ProblemResponse'
        400:
          description: If reverting to the most recent snapshot failed for any reason
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/room-preferences:
    put:
      summary: Update room preferences
      description: |
        Updates the room preferences for the given itinerary.

        The caller can use this method to update the room preferences (bed type for each room) in the itinerary
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            The selection
          in: body
          schema:
            $ref: '#/definitions/UpdateRoomPreferencesRequest'
      responses:
        200:
          description: |
            Response describing the updates actually made on the itinerary
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid or an unexpected error happened
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/accommodations:
    get:
      summary: Get added hotels
      description: |
        Returns all accommodation components (hotels) defined in the itinerary.
        The caller can use this method to retrieve a list of all hotels currently defined in the itinerary

        Requesting for everything that can be included would look like

        ?include=accommodation.amenities,accommodation.tags,
        accommodation.contactDetails,accommodation.location

      tags:
        - Hotels
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/includeParam'
      responses:
        200:
          description: |
            Returns all accommodation components (hotels) defined in the itinerary
          schema:
            $ref: '#/definitions/AccommodationComponentsResponse'

  /{itineraryId}/accommodations/alternatives:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get hotels offers
      description: |
        Returns alternative hotel offers for a given, already added hotel.

        This endpoint allows the caller to search for alternative accommodations. In order to get the details
        for a specific offer, you need to use the /{itineraryId}/accommodations/offers endpoint

        Searching for alternatives is based on the filter parameters passed to the end point. Currently,
        we constrain all accommodations to a specific date.
      tags:
        - Hotels
      produces:
        - application/json
      parameters:
        - name: filter[startDate]
          in: query
          type: string
          description: |
            Search for alternatives which have an availability on the given date. The given parameter is
            a "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          required: true
        - name: filter[externalRefs.mhc]
          in: query
          type: string
          description: |
            A list of comma separated MHCs (master hotel code, the primary hotel ID of Anixe) that specifies the accommodations that should be used in the
            accommodation search.
        - name: filter[text]
          in: query
          type: string
          description: |
            Textual query to be used for fuzzy search, may include part of hotel name, city, IDs etc. This filter will be used to select the hotel properties for which offers will be requested.
        - name: filter[starsMin]
          in: query
          type: integer
          description: |
            Limits hotel stars category, all hotels with lower stars category will be filtered out. This filter will be used to select the hotel properties for which offers will be requested.
        - name: filter[starsMax]
          in: query
          type: integer
          description: |
            Limits hotel stars category, all hotels with higher stars category will be filtered out. This filter will be used to select the hotel properties for which offers will be requested.
        - name: filter[suppliers]
          in: query
          type: string
          description: |
            A list of comma separated Supplier names to filter only hotels with offers from these suppliers. This filters only
            hotels, not offers, i.e. if some hotel is in response then it has at least one offer from filtered suppliers. In other words, this filter will be used to select the hotel properties for which offers will be requested.
      responses:
        200:
          description: |
            Returns the list of alternative accommodations
          schema:
            $ref: '#/definitions/AccommodationAlternativesResponse'

  /{itineraryId}/accommodations/offers:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get hotel offer details
      description: |
        Returns the list of offers for the given parameters.

        A user would use this endpoint to retrieve the list of accommodation offers given specific
        product information and a start date. The user can then do a POST call with one of the returned
        offers to add it to their itinerary.
      tags:
        - Hotels
      produces:
        - application/json
      parameters:
        - name: startDate
          in: query
          type: string
          required: true
          description: |
            A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
        - name: productId
          in: query
          type: string
          required: true
          description: |
            Search for offers for the alternative hotel. This value is sent back by the server as part of the alternatives response
        - name: source
          in: query
          type: string
          required: false
          description: |
            The source from which the given productId was returned. This value is returned as part of the
            alternatives response. Due to backward-compatibility with the existing API, the value is
            not required in version 1. If not provided, then the backend will use the default accommodation
            source defined on the itinerary. It is therefore highly recommended to always set the source.
      responses:
        200:
          description: |
            Returns a list of accommodation offers
          schema:
            $ref: '#/definitions/AccommodationOffersResponse'
    post:
      summary: Add/Replace hotel
      description: Adds or replaces a hotel in a stop
      tags:
        - Hotels
      produces:
        - application/json
      parameters:
        - name: offer
          description: The update request containing the information used to identify the new hotel
          in: body
          schema:
            $ref: '#/definitions/SelectAccommodationOfferRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            with the updated or newly added hotel as well as a meta object holding addition information
            and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/accommodations/{accommodationId}:
    delete:
      summary: Remove hotel
      description: |
        If we have an existing hotel identified by {accomodationId}, then this call will delete it
      tags:
        - Hotels
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: accommodationId
          description: The accommodation ID we are deleting
          in: path
          type: string
          required: true
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            with the updated or newly added hotel as well as a meta object holding addition information
            and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/activities:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get added activities
      description: Returns all activity components contained in the itinerary
      tags:
        - Activities
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/includeParam'
      responses:
        200:
          description: |
            Returns the list of activities contained in the itinerary

            Requesting for everything that can be included would look like:

            ?include=activity.segments,activity.amenities,
            activity.serviceCategories,activity.tourAttributes,activity.infoSections,
            activity.tags,activity.pictures,activity.paxDetails

          schema:
            $ref: '#/definitions/ActivityComponentsResponse'
    post:
      summary: Add activity
      description: Adds a new activity component to the itinerary
      tags:
        - Activities
      produces:
        - application/json
      parameters:
        - name: activity
          description: |
            The request contains the activity information used to locate the correct
            activity product, create an activity component, and insert the component into the
            itinerary.
          in: body
          schema:
            $ref: '#/definitions/ActivityUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/activities/{activityId}:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    post:
      summary: Replace activity
      description: Replaces the activity component referenced by `activityId` with a new component
      tags:
        - Activities
      produces:
        - application/json
      parameters:
        - name: activityId
          description: The activity component ID
          in: path
          type: string
          required: true
        - name: activity
          description: |
            The request contains the activity information used to locate the correct activity product,
            create an activity component, and update the component identified by `activityId`. Similar
            to the insert activity route, this route uses the same request structure.
          in: body
          schema:
            $ref: '#/definitions/ActivityUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
    delete:
      summary: Remove activity
      description: |
        Deletes the activity component referenced by 'activityId'
      tags:
        - Activities
      produces:
        - application/json
      parameters:
        - name: activityId
          description: The activity component ID
          in: path
          type: string
          required: true
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/activities/offers:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get activities offers
      description: |
        Returns the list of activity offers for the stop idenitified by the given 'startDate'

        This route will return all activity offers for the given 'startDate'. The backend will use
        the 'startDate' to locate the correct location in the itinerary and return all available
        activity offers.
      tags:
        - Activities
      produces:
        - application/json
      parameters:
        - name: filter[startDate]
          in: query
          type: string
          required: false
          description: |
            A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
        - name: filter[areaRefId]
          in: query
          type: string
          required: false
          description: |
            areaRefId is required to identefy a leg
        - name: filter[activityId]
          in: query
          type: string
          required: false
          description: |
            An activity ID as a string which will be used to retrieve activity offers for the activity with activityId.
      responses:
        200:
          description: |
            Returns the list of activity offers
          schema:
            $ref: '#/definitions/ActivityOffersResponse'

  /{itineraryId}/activities/offers/{activityId}:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get activities offer details
      description: |
        Returns the list of activity offer details for the activity idenitified by the given 'activityId' and 'source'

        This route will return activity offer details for the given 'activityId'. The backend will use
        the 'activityId' to locate the correct activity product and return the detailed offers for it.
      tags:
        - Activities
      produces:
        - application/json
      parameters:
        - name: activityId
          in: path
          type: string
          required: true
          description: |
            An activity ID as a string which will be used to retrieve activity offers for the activity with activityId.
        - name: pickupId
          in: query
          type: string
          required: false
          description: |
            The optional pickup ID to be considered. In some activities this influences prices and availability.
        - name: dropoffId
          in: query
          type: string
          required: false
          description: |
            The optional dropoff ID to be considered. In some activities this influences prices and availability.
        - name: startDate
          in: query
          type: string
          required: true
          description: |
            A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
        - name: source
          in: query
          type: string
          required: false
          description: |
            The source of the offer from which the details are being requested.
      responses:
        200:
          description: |
            Returns the offer details for a given activity
          schema:
            $ref: '#/definitions/ActivityOfferDetailsResponse'

  /{itineraryId}/transfers:
    get:
      summary: Get added transfers
      description: Returns all transfer components contained in the itinerary
      produces:
        - application/json
      tags:
        - Transfers
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/includeParam'
      responses:
        200:
          description: |
            A list of transfer components found in the itinerary

            Requesting for everything that can be included would look like:

            ?include=transfer.amenities,transfer.serviceCategory,
            transfer.tags,transfer.type,transfer.private,
            transfer.shortDesc

          schema:
            $ref: '#/definitions/TransferComponentsResponse'

  /{itineraryId}/transfers/{transferComponentId}:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
      - name: transferComponentId
        description: The transfer component ID
        in: path
        type: string
        required: true
    delete:
      summary: Remove transfer
      description: |
        Removes a transfer product with transferId, replacing with a transfer placeholder
      tags:
        - Transfers
      produces:
        - application/json
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            with the updated transfer as well as a meta object holding addition information
            and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/transfers/{transferComponentId}/offers:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
      - name: transferComponentId
        description: The transfer component ID
        in: path
        type: string
        required: true
    get:
      summary: Get transfer offers
      description: |
        Returns the list of transfer offers for the stop idenitified by the given 'startDate'.

        This route will return all transfer offers which are suitable replacement for the
        current transfer component identified by "transferComponentId".
        The transferComponentId is returned by the following endpoint: "/{itineraryId}/transfers".

        Transfers are only available between an airport and a location, either from an airport to a location or from a location to an airport.
        A transport is required before being able to search for transfers.
      tags:
        - Transfers
      produces:
        - application/json
      responses:
        200:
          description: |
            A list of transfer offers based on the input query
          schema:
            $ref: '#/definitions/TransferOffersResponse'
    post:
      summary: Add/replace transfer
      description: |
        Adds or replaces a transfer with the given transfer offer data
      tags:
        - Transfers
      produces:
        - application/json
      parameters:
        - name: offer
          description: The update request containing the information used to identify the new hotel
          in: body
          schema:
            $ref: '#/definitions/TransferOfferUpdateRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            with the updated or newly added transfer as well as a meta object holding addition information
            and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/rental-cars:
    get:
      summary: Get added rental cars
      description: Returns all rental car components contained in the itinerary
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/includeParam'
      responses:
        200:
          description: |
            Returns the list of rental cars contained in the itinerary

            Requesting for everything that can be included would look like:

            ?include=rentalCar.acriss,rentalCar.amenities,
            rentalCar.pictures,rentalCar.tags

          schema:
            $ref: '#/definitions/RentalCarComponentsResponse'
    post:
      summary: Add/exchange rental car
      description: Adds/exchanges a rental car component in the itinerary
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: rentalCarId
          in: query
          type: string
          description: Defines current rental car ID in the itinerary in case of exchanging rental cars.
        - name: rentalCarOffer
          description: |
            The request contains the rental car information used to locate the correct
            rental car product, create an rental car component, and insert the component into the
            itinerary.
          in: body
          required: true
          schema:
            $ref: '#/definitions/SelectRentalCarOfferRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/rental-cars/offers:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      deprecated: true
      summary: Get rental cars offers
      description: |
        This route will return all rental car offers for this itinerary.

        **DEPRECATED**: use /{itineraryId}/rental-cars/{rentalCarId}/offers
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - name: rentalCarId
          in: query
          type: string
          description: Search for alternatives for already selected rental car id.
        - name: driverAge
          in: query
          type: integer
          description: Driver age at the day the car is being picked up. This is only required if the age is outside the standard 25-69 years.
      responses:
        200:
          description: |
            Returns a list of rental car offers
          schema:
            $ref: '#/definitions/RentalCarsOffersResponse'

  /{itineraryId}/rental-cars/{rentalCarId}/offers:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    post:
      summary: Get rental cars offers
      description: |
        This route will return all rental car offers for this itinerary.
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - name: rentalCarId
          in: path
          type: string
          required: true
          description: Search for alternatives for already selected rental car id.
        - name: data
          description: |
            The rental car offer search request
          in: body
          schema:
            $ref: '#/definitions/RentalCarSearchOffersRequest'
      responses:
        200:
          description: |
            Returns a list of rental car offers
          schema:
            $ref: '#/definitions/RentalCarsOffersResponse'

  /{itineraryId}/rental-cars/offers/{offerId}:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      deprecated: true
      summary: Get rental car offer details
      description: |
        This route will return all rental car offers for this itinerary.

        **DEPRECATED**: use /{itineraryId}/rental-cars/{rentalCarId}/offers/{offerId}
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - name: offerId
          description: The ID referencing the rental car offer to get the details
          in: path
          type: string
          required: true
        - name: rentalCarId
          in: query
          type: string
          description: Search for alternatives for already selected rental car id.
        - name: source
          in: query
          type: string
          description: The source of the offer
      responses:
        200:
          description: |
            Returns the offer details of the specified rental car
          schema:
            $ref: '#/definitions/RentalCarsOfferDetailsResponse'

  /{itineraryId}/rental-cars/{rentalCarId}/offers/{offerId}:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get rental car offer details
      description: |
        This route will return all rental car offers for this itinerary.
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - name: offerId
          description: The ID referencing the rental car offer to get the details
          in: path
          type: string
          required: true
        - name: rentalCarId
          in: path
          type: string
          required: true
          description: Search for alternatives for already selected rental car id.
        - name: source
          in: query
          type: string
          description: The source of the offer
      responses:
        200:
          description: |
            Returns the offer details of the specified rental car
          schema:
            $ref: '#/definitions/RentalCarsOfferDetailsResponse'

  /{itineraryId}/rental-cars/{rentalCarId}/pickup-dropoff/alternatives:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get list of alternative pick-up/drop-off locations
      description: |
        Returns the list of rental car pick-up and drop-off locations which can be used when searching for offers
        The response will contain a list for both the possible pick-ups as well as one for the possible
        drop-offs.
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - name: rentalCarId
          in: path
          type: string
          required: true
          description: Search for alternatives for already selected rental car id.
      responses:
        200:
          description: |
            Returns list of alternative pick-up and drop-off locations which can be used when searching for offers
          schema:
            $ref: '#/definitions/RentalCarPuDoAlternativesResponse'

  /{itineraryId}/rental-cars/{rentalCarId}:
    delete:
      summary: Remove rental car
      description: Deletes rental car component with the given ID from the itinerary
      tags:
        - Rental Cars
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: rentalCarId
          description: The ID referencing the rental car component to delete
          in: path
          type: string
          required: true
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            without the rental car components.
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/generic-ad-hoc-components:
    get:
      summary: Get generic ad-hocs
      description: Returns all generic ad-hoc components contained in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/includeParam'
      responses:
        200:
          description: |
            A list of generic ad-hoc components found in the itinerary
          schema:
            $ref: '#/definitions/GenericAdHocComponentsResponse'
    post:
      summary: Add generic ad-hoc
      description: |
        Adds a new generic ad-hoc component to the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            The request contains the generic ad-hoc component information used to create it
            and insert it into the itinerary.
          in: body
          schema:
            $ref: '#/definitions/GenericAdHocComponentUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/generic-ad-hoc-components/{componentRefId}:
    put:
      summary: Update generic ad-hoc
      description: |
        Updates a generic ad-hoc component in the itinerary

      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            The request contains the generic ad-hoc component information used to replace
            the existing one
          in: body
          schema:
            $ref: '#/definitions/GenericAdHocComponentUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
    delete:
      summary: Remove generic ad-hoc
      description: |
        Deletes a generic ad-hoc component identified by `componentRefId`
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            The request contains the generic ad-hoc component information used to replace
            the existing one
          in: body
          schema:
            $ref: '#/definitions/GenericAdHocComponentUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/activity-ad-hoc-components:
    get:
      summary: Get activity ad-hocs
      description: Returns all activity ad-hoc components contained in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/includeParam'
      responses:
        200:
          description: |
            A list of activity ad-hoc components found in the itinerary
          schema:
            $ref: '#/definitions/ActivityAdHocComponentsResponse'
    post:
      summary: Add ad-hoc activity
      description: |
        Adds a new activity ad-hoc component to the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            The request contains the activity ad-hoc component information used to create it
            and insert it into the itinerary.
          in: body
          schema:
            $ref: '#/definitions/AdhocActivityInsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/activity-ad-hoc-components/bookings/{componentSource}/{bookingId}:
    get:
      summary: Get a list of activities ad-hocs available for importing
      description: Returns a list of ids and titles of activity ad-hoc available for importing from an external system
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentSourceParam'
        - $ref: '#/parameters/bookingIdParam'
      responses:
        200:
          description: |
            A list of activities ad-hocs available to import
          schema:
            $ref: '#/definitions/ActivityAdHocComponentsImportListResponse'

  /{itineraryId}/activity-ad-hoc-components/bookings/{componentSource}/{bookingId}/details/{activityIds}:
    get:
      summary: Fetch a list of details of activities ad-hocs
      description: Fetches a list of details of activities ad-hocs from the external system
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentSourceParam'
        - $ref: '#/parameters/bookingIdParam'
        - name: activityIds
          description: |
            A comma-delimited list of activity ids within the booking to fetch
          in: path
          type: array
          items:
            type: string
          minItems: 1
          required: true
      responses:
        200:
          description: |
            A list of fetched activities ad-hocs
          schema:
            $ref: '#/definitions/ActivityAdHocComponentsImportDetailsResponse'

  /{itineraryId}/activity-ad-hoc-components/{componentRefId}:
    put:
      summary: Update ad-hoc activity
      description: |
        Updates an activity ad-hoc component in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            The request contains the activity ad-hoc component information used to replace
            the existing one
          in: body
          schema:
            $ref: '#/definitions/ActivityAdHocComponentUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
    delete:
      summary: Delete ad-hoc activity
      description: |
        Deletes an activity ad-hoc component in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
      responses:
        200:
          description: |
            The activity ad-hoc component was deleted successfully
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
        404:
          description: |
            The ad-hoc activity component with the given refId does not exist
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/rental-car-ad-hoc-components:
    get:
      summary: Get ad-hoc rental cars
      description: Returns all ad-hoc rental car components contained in the itinerary.
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            A list of all the ad-hoc rental car components contained in the itinerary.
          schema:
            type: array
            items:
              $ref: '#/definitions/RentalCarAdHocComponentEntity'
    post:
      summary: Add ad-hoc rental cars
      description: Create and add an ad-hoc rental car components to the itinerary.
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/RentalCarAdHocComponentValue'
            minItems: 1
      responses:
        200:
          description: List of the created and added rental car ad-hoc components.
          schema:
            type: array
            items:
              $ref: '#/definitions/RentalCarAdHocComponentEntity'
            minItems: 1
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/rental-car-ad-hoc-components/{componentRefId}:
    put:
      summary: Update ad-hoc rental car
      description: Update the ad-hoc rental car component identified by `componentRefId`.
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          in: body
          schema:
            $ref: '#/definitions/RentalCarAdHocComponentValue'
      responses:
        200:
          description: Returns the successfully updated ad-hoc rental car component
          schema:
            $ref: '#/definitions/RentalCarAdHocComponentEntity'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
    delete:
      summary: Delete ad-hoc rental car
      description: |
        Delete the ad-hoc rental car component identified by `componentRefId`.
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
      responses:
        204:
          description: The ad-hoc rental car component was deleted successfully.

  /{itineraryId}/rental-car-ad-hoc-components/bookings/{componentSource}/{bookingId}:
    get:
      summary: Get a list of rental car ad-hocs available for importing
      description: Returns a list of ids and titles of rental car ad-hoc available for importing from an external system
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentSourceParam'
        - $ref: '#/parameters/bookingIdParam'
      responses:
        200:
          description: |
            A list of rental car ad-hocs available to import
          schema:
            $ref: '#/definitions/ActivityAdHocComponentsImportListResponse'

  /{itineraryId}/rental-car-ad-hoc-components/bookings/{componentSource}/{bookingId}/details/{rentalcarIds}:
    get:
      summary: Fetch a list of details of rental car ad-hocs
      description: Fetches a list of details of rental car ad-hocs from the external system
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentSourceParam'
        - $ref: '#/parameters/bookingIdParam'
        - name: rentalcarIds
          description: |
            A comma-separated list of IDs of rental cars within the booking to fetch
          in: path
          type: array
          items:
            type: string
          minItems: 1
          required: true
      responses:
        200:
          description: |
            A list of fetched activities ad-hocs
          schema:
            $ref: '#/definitions/ActivityAdHocComponentsImportDetailsResponse'

  /{itineraryId}/transport-ad-hoc-components:
    get:
      summary: Get transport ad-hoc components
      description: Returns all transport ad-hoc components contained in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            A list of transport ad-hoc components found in the itinerary
          schema:
            $ref: '#/definitions/TransportAdHocComponentsResponse'
    post:
      summary: Add ad-hoc transport
      description: |
        Adds a new transport ad-hoc component to the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            The request contains the transport ad-hoc component information used to create them
            and insert them into the itinerary.
          in: body
          schema:
            $ref: '#/definitions/TransportAdhocInsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding additional information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transport-ad-hoc-components/{componentRefId}:
    put:
      summary: Update ad-hoc transport
      description: |
        Updates an transport ad-hoc component in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            The request contains the transport ad-hoc component information used to replace
            the existing one
          in: body
          schema:
            $ref: '#/definitions/TransportAdHocComponentUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
    delete:
      summary: Delete ad-hoc transport
      description: |
        Deletes an transport ad-hoc component in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
      responses:
        200:
          description: |
            The transport ad-hoc component was deleted successfully
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
        404:
          description: |
            The ad-hoc transport component with the given refId does not exist
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/accommodation-ad-hoc-components:
    get:
      summary: Get accommodation ad-hoc components
      description: Returns all accommodation ad-hoc components contained in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            A list of accommodation ad-hoc components found in the itinerary
          schema:
            $ref: '#/definitions/AccommodationAdHocComponentsResponse'
    post:
      summary: Add ad-hoc accommodation
      description: |
        Adds a new accommodation ad-hoc component to the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            The request contains the accommodation ad-hoc component information used to create
            and insert them into the itinerary.
          in: body
          schema:
            $ref: '#/definitions/AccommodationAdHocComponentUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding additional information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/accommodation-ad-hoc-components/{componentRefId}:
    put:
      summary: Update ad-hoc accommodation
      description: |
        Updates an accommodation ad-hoc component in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            The request contains the accommodation ad-hoc component information used to replace
            the existing one
          in: body
          schema:
            $ref: '#/definitions/AccommodationAdHocComponentUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
    delete:
      summary: Delete ad-hoc accommodation
      description: |
        Deletes an accommodation ad-hoc component in the itinerary
      tags:
        - Ad-Hoc
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
      responses:
        200:
          description: |
            The accommodation ad-hoc component was deleted successfully
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
        404:
          description: |
            The ad-hoc accommodation component with the given refId does not exist
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/base-services:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get added base services
      description: Returns all base service components contained in the itinerary
      tags:
        - Base Services
      produces:
        - application/json
      responses:
        200:
          description: |
            Returns all base service components contained in the itinerary
          schema:
            $ref: '#/definitions/BaseServiceComponentsResponse'
    post:
      summary: Add base service
      description: |
        Adds a new base service component to the itinerary
      tags:
        - Base Services
      produces:
        - application/json
      parameters:
        - name: base-service
          description: |
            The request contains the base service information used to locate the correct
            base service product, create a base service component, and insert the component into the
            itinerary.
          in: body
          schema:
            $ref: '#/definitions/BaseServiceUpsertRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/base-services/{baseServiceId}:
    delete:
      summary: Remove base service
      description: |
        Deletes the base service component identified by `baseServiceId`.
      tags:
        - Base Services
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: baseServiceId
          description: The base service component id
          in: path
          type: string
          required: true
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary as well as a meta
            object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/base-services/offers:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      summary: Get base services offers
      description: |
        This route will return all base service offers for the given itinerary.
      tags:
        - Base Services
      produces:
        - application/json
      parameters:
        - name: query
          in: query
          type: string
          required: false
          description: |
            A "string" to filter the base service names by
        - name: baseServiceType
          in: query
          type: string
          required: false
          description: |
            A "string" to filter the base service by type
      responses:
        200:
          description: |
            Returns the list of base service offers
          schema:
            $ref: '#/definitions/BaseServiceOffersResponse'

  /{itineraryId}/modules/{moduleId}/alternatives:
    get:
      summary: Get alternative modules
      description: |
        Returns a list of managed module template ids.

        This endpoint allows a caller to search for alternative module templates which could
        be used to replace the module referenced by `moduleId`. The details for the individual
        module templates can then be retrieved via the Discovery API. Futhermore, the ids
        returned here can then be used to invoke /{itineraryId}/modules/{moduleId}/exchange
      tags:
        - Modules
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/moduleIdParam'
      responses:
        200:
          description: |
            Returns a list of managed module template ids
          schema:
            $ref: '#/definitions/ExchangeModulesAlternativesResponse'

  /{itineraryId}/modules/{moduleId}/exchange:
    post:
      summary: Replace module
      description: |
        Exchanges the module referenced by `moduleId` with the module sent in the POST request.

        This endpoint allows a caller to switch out (or exchange) the exchangeable module identified
        by `moduleId` that is currently part of the itinerary. In particular, it allows callers
        working with modular templates to exchange both the pre- and post-programs.

        This operation will mutate the itinerary identified by `itineraryId` and return the modified
        version back to the caller. Note that this operation does not create a new Itinerary.
      tags:
        - Modules
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/moduleIdParam'
        - name: data
          description: |
            The update request containing the information used to update the international flight. This
            request is formed on the basis of one of the offers returned by the backend
          in: body
          schema:
            $ref: '#/definitions/ExchangeModuleRequest'
      responses:
        200:
          description: |
            Returns the updated itinerary
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/modules/{moduleId}/use-default-extension:
    post:
      summary: Revert to default module
      description: |
        Switches back to using the default module present in the itinerary before it was switched out.
      tags:
        - Modules
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/moduleIdParam'
      responses:
        200:
          description: |
            Returns the updated itinerary
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/modules/{moduleId}/route:
    get:
      summary: Get route
      description: |
        Edit the route of an itinerary. This GET call returns the route object which the route modifications
        can be applied to and then stored again (see POST call). Any route modification takes place within
        a specific itinerary module identified by its `moduleId`.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/moduleIdParam'
      responses:
        200:
          description: |
            Returns the updated itinerary route
          schema:
            $ref: '#/definitions/RouteResponse'
    post:
      summary: Update route
      description: |
        Updates the route of the itinerary module. The following modifications are supported:

        * change number of nights
        * edit the location of a route point
        * change the order of the route points
        * add new route points or remove existing ones
        * edit location of the start/end location

        The server will re-arrange everything in the itinerary, including checking for new prices for all types of components
        and updating them accordingly. Non-available products may be removed from the itinerary or marked as invalid
        (e.g., an international flight due to the fact that dates have been changes, or the start/end location was changed).

        Please be aware of the boolean flags marking locations or connections as non-mutable. Also, the start/end
        location of a module are not editable if they link to another module that is placed before/after the edited module.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/moduleIdParam'
        - name: data
          description: |
            Itinerary route update request
          in: body
          schema:
            $ref: '#/definitions/RouteUpdateRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/recheck:
    post:
      summary: Recheck availabilities
      description: |
        Rechecks the availabilities and prices of an itinerary.

        This call will recheck the itinerary identified by 'refId' and update availabilities and prices of components.
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the rechecked Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/RecheckResponse'
        404:
          description: If no itinerary could be found
          schema:
            $ref: '#/definitions/ProblemResponse'
        400:
          description: If recheck operation failed for any reason
          schema:
            $ref: '#/definitions/ProblemResponse'
        422:
          description: |
            If recheck of the itinerary cannot be made because the itinerary is not in a valid status.
            Only itineraries in status Open and Alternative can be processed with a recheck.
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transports:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
      - $ref: '#/parameters/includeParam'
    get:
      summary: Get added transports
      description: Returns all transports components contained in the itinerary
      tags:
        - Transports
      produces:
        - application/json
      responses:
        200:
          description: |
            TODO
          schema:
            $ref: '#/definitions/TransportComponentsResponse'
        400:
          description: The request was invalid or an unexpected error happened
          schema:
            $ref: '#/definitions/ProblemResponse'
    post:
      summary: Get transport offers
      description: |
        Get transports offers for one or more transport connections
      tags:
        - Transports
      produces:
        - application/json
      parameters:
        - name: data
          description: |
            The transport offer search request. Describes all the connections.
          in: body
          schema:
            $ref: '#/definitions/TransportOfferRequest'
      responses:
        200:
          description: |
            Returns a list of transport offers.
          schema:
            $ref: '#/definitions/TransportOfferResponse'
        400:
          description: The request was invalid or an unexpected error happened
          schema:
            $ref: '#/definitions/ProblemResponse'
    put:
      summary: Add transport
      description: |
        Adds the selected offer as a one or more transport components in the itinerary.
        Sending back the selected offer is enough to select it.
      tags:
        - Transports
      produces:
        - application/json
      parameters:
        - name: data
          description: |
            The offer(s) selected for all connections
          in: body
          schema:
            $ref: '#/definitions/TransportOfferUpdateRequest'
      responses:
        200:
          description: |
            Response describing the updates actually made on the itinerary
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid or an unexpected error happened
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transports/{transportId}:
    delete:
      summary: Remove transport
      description: |
        Removes the transport component from the itinerary.

        If we have an existing transport identified by {transportId}, then this call will delete it.
        Note that this call can delete more than one transport, as multiple transport can share the same booking id.
      tags:
        - Transports
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: transportId
          description: The ID of a transport component to delete.
          in: path
          type: string
          required: true
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            without the transport components.
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transports/bags:
    post:
      summary: Add bags to transport
      description: |
        This endpoint allows updating the included pieces of baggage of transport connection.

        A bag is linked to a segment, so the body of the request must define all included bags (even free ones) for all the pax and all the the segments of all
        the transport connections to update.

        Note that this endpoint does not update the total price of transport connections updated, and a booking inquiry must be performed after this update to
        recheck the total price and the availability of the transport connections.
      tags:
        - Transports
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Bags update request.
          in: body
          schema:
            $ref: '#/definitions/TransportBagsUpdateRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            with the updated transport components.
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transports/general-rules:
    get:
      summary: Get fare rules
      description: Returns the fare rules of transports
      tags:
        - Transports
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            Returns general rules plain text
          schema:
            $ref: '#/definitions/TransportGeneralRulesResponse'

  /{itineraryId}/transports/pull-pnr:
    post:
      summary: Imports a PNR
      description: |
        Retrieves the given PNR identified by the pnr locator (aka file key) and
        CRS and imports it into the itinerary
      tags:
        - Transports
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: Imports a PNR
          in: body
          schema:
            $ref: '#/definitions/TransportPullPnrRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            with the updated transport components.
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transport-class-upgrade-options:
    get:
      summary: Gets transport class upgrade options
      description: Gets the available flight upgrade options for the transports currently found on the itinerary
      tags:
        - Transports
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
      produces:
        - application/json
      responses:
        200:
          description: |
            Returns a TransportClassUpgradeOffersResponse object containing the list of
            transport offers for each available transport class.
          schema:
            $ref: '#/definitions/TransportClassUpgradeOffersResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
    post:
      summary: Upgrades transport class
      description: |
        Trigger the re-creation of the transport components represented by the list
        of given transport offers.
      tags:
        - Transports
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Service Level Update.
          in: body
          schema:
            $ref: '#/definitions/TransportClassUpgradeOffersRequest'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/customer:
    get:
      summary: Get customer details
      description: |
        Gets the current customer information in the itinerary
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            Returns the customer information
          schema:
            $ref: '#/definitions/CustomerResponse'
    put:
      summary: Update customer details
      description: |
        Updates the customer data in the itinerary
      tags:
        - Itinerary
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Customer update request.
          in: body
          schema:
            $ref: '#/definitions/CustomerUpdateRequest'
      responses:
        200:
          description: |
            Returns the customer information
          schema:
            $ref: '#/definitions/CustomerResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/pax-details:
    get:
      summary: Get PAX details
      description: |
        Gets the current pax information in the itinerary
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/itineraryIdParam'
      responses:
        200:
          description: |
            Returns the pax information
          schema:
            $ref: '#/definitions/PaxInfoResponse'
    put:
      summary: Update PAX details
      description: |
        Updates the pax info in the itinerary.
        Only updates in passanger names and genders are allowed with this endpoint.
      tags:
        - Itinerary
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Pax info update request.
          in: body
          schema:
            $ref: '#/definitions/PaxInfoUpdateRequest'
      responses:
        200:
          description: |
            Returns the pax details information
          schema:
            $ref: '#/definitions/PaxInfoResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/remarks:
    put:
      summary: Update general remarks
      description: |
        Updates the remarks in the itinerary
      tags:
        - Itinerary
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/legs/{legId}/stop/remarks:
    put:
      summary: Update stop remarks
      description: |
        Updates the remarks in the specified stop
      tags:
        - Itinerary
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/legIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/accommodations/{componentRefId}/remarks:
    put:
      summary: Update hotel remarks
      description: |
        Updates the remarks in the specified accommodation component
      tags:
        - Hotels
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/activities/{componentRefId}/remarks:
    put:
      summary: Update activity remarks
      description: |
        Updates the remarks in the specified activity component
      tags:
        - Activities
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transfers/{componentRefId}/remarks:
    put:
      summary: Update transfer remarks
      description: |
        Updates the remarks in the specified transfer component
      tags:
        - Transfers
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/transports/{componentRefId}/remarks:
    put:
      summary: Update transport remarks
      description: |
        Updates the remarks in the specified transport component
      tags:
        - Transports
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/rental-cars/{componentRefId}/remarks:
    put:
      summary: Update rental car remarks
      description: |
        Updates the remarks in the specified rental car component
      tags:
        - Rental Cars
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/upgrade-references:
    post:
      summary: Upgrades the template and product references
      description: |
        Upgrades the template and product references of an existing itinerary
        to the latest published revisions of those modules and products.
      tags:
        - Itinerary
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/UpgradeReferences'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/managed-service-levels:
    post:
      summary: Recreates the accommodation components for the new service level
      description: |
        Trigger the re-creation of all accommodation components for the new service level.
      tags:
        - Itinerary
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Service Level Update.
          in: body
          schema:
            $ref: '#/definitions/RecreateComponents'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the updated Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'
    get:
      summary: Gets the available managed service levels for this itinerary and their prices
      tags:
        - Itinerary
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
      produces:
        - application/json
      responses:
        200:
          description: |
            Returns a ItineraryManagedServiceLevelsResponse object containing the currently
            selected managed service level and the available ones, along with the itinerary
            price resulting from the change.
          schema:
            $ref: '#/definitions/ItineraryManagedServiceLevelsResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/upsell-items/travel-documentation/offers:
    post:
      summary: Updates display config of upsell item offers in travel documentation
      description: |
        Updates configuration for displaying of upsell item offers in travel documentation.
      tags:
        - Upsell Items
      parameters:
        - $ref: '#/parameters/itineraryIdParam'
        - name: data
          description: |
            Upsell Item offers planning update.
          in: body
          schema:
            $ref: '#/definitions/UpsellItemTravelDocsOffers'
      responses:
        200:
          description: OK
        400:
          description: The request was invalid
          schema: '#/definitions/ProblemResponse'
      get:
        description: |
          Returns an UpsellItemOffersPlanningResponse object containing all upsell item offers
          and their current display configuration
        schema:
          $ref: '#/definitions/UpsellItemTravelDocsOffers'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  #################################################################################################
  #
  # DEPRECATED ENDPOINTS
  #
  #################################################################################################

  /{itineraryId}/transports/locations:
    get:
      deprecated: true
      summary: Get locations
      description: |
        Based on the search keywords of the input, a list of matching locations is returned, ordered by relevancy.
        These locations can be used as-is in any transport related endpoint to define start or end locations.

        **DEPRECATED**. Use locations API. Get locations from a query
      tags:
        - Itinerary
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: searchKeywords
          in: query
          type: string
          description: |
            Keywords to search for
          required: true
      responses:
        200:
          description: |
            Returns a list of transport locations matching the keywords
          schema:
            $ref: '#/definitions/TransportLocationsResponse'

  /{itineraryId}/flights/{componentRefId}/remarks:
    put:
      deprecated: true
      summary: Update flight remarks
      description: |
        Updates the remarks in the specified flight component

        **DEPRECATED**: use transport endpoints
      tags:
        - Flights
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - $ref: '#/parameters/componentRefIdParam'
        - name: data
          description: |
            Remarks update.
          in: body
          schema:
            $ref: '#/definitions/RemarksWrapper'
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the newly reverted Itinerary
            and possibly a meta object holding addition information and/or warnings
          schema:
            $ref: '#/definitions/ItineraryResponse'
        400:
          description: The request was invalid
          schema:
            $ref: '#/definitions/ProblemResponse'

  /{itineraryId}/flights:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
      - $ref: '#/parameters/includeParam'
    get:
      deprecated: true
      summary: Get added flights
      description: |
        Returns all flight components contained in the itinerary.

        **DEPRECATED**: use the transports endpoints.
      tags:
        - Flights
      produces:
        - application/json
      responses:
        200:
          description: |
            Returns all flight components contained in the itinerary
          schema:
            $ref: '#/definitions/FlightComponentsResponse'

  /{itineraryId}/flights/{flightId}:
    delete:
      deprecated: true
      summary: Remove flight
      description: |
        Removes the flight component from the itinerary.

        **DEPRECATED**: use the transports endpoints.
      tags:
        - Flights
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/versionParam'
        - $ref: '#/parameters/itineraryIdParam'
        - name: flightId
          description: The ID referencing the flight component to delete
          in: path
          type: string
          required: true
      responses:
        200:
          description: |
            Returns an ItineraryResponse object containing the Itinerary (specifically a view of the Itinerary)
            without the flight components.
          schema:
            $ref: '#/definitions/ItineraryResponse'

  /{itineraryId}/flights/offers:
    parameters:
      - $ref: '#/parameters/versionParam'
      - $ref: '#/parameters/itineraryIdParam'
    get:
      deprecated: true
      summary: Search flight offers
      description: |
        Returns the list of flight offers/fares for the given parameters.

        A user would use this endpoint to retrieve the list of flight offers for a specific departure location
        (the rest of the required parameters are taken from the itinerary). To select one of the returned fares,
        the caller will need to do a POST call.

        **DEPRECATED**: use the transports endpoints.
      tags:
        - Flights
      produces:
        - application/json
      parameters:
        - name: departureLocationCode
          in: query
          type: string
          required: true
          description: |
            3-letter IATA code identifying the departure airport
        - name: flightClass
          in: query
          type: string
          description: |
            The flight class (Economy, PremiumEconomy, BusinessClass, FirstClass).
            If not specified, it will default to Economy
      responses:
        200:
          description: |
            Returns a list of flight offers/fares
          schema:
            $ref: '#/definitions/FlightOffersResponse'

definitions:
  ItineraryPriceProbingRequest:
    type: object
    properties:
      refId:
        type: string
        description: Reference ID
      urlId:
        type: string
        description: URL ID
      startDate:
        type: string
        format: date
        description: Start date in YYYY-MM-DD format
      allocatedPax:
        $ref: '#/definitions/PaxAllocation'
      numPax:
        type: number
        format: int32
      accommodationLevel:
        type: string
        description: Accommodation level
      currency:
        type: string
        description: The ISO-4217 currency code (e.g. EUR, USD, etc)
        format: iso-4217

  ItineraryPriceProbingComponents:
    type: object
    properties:
      accommodations:
        type: array
        items:
          $ref: '#/definitions/AccommodationComponent'

  ItineraryPriceProbingResponse:
    type: object
    required:
      - priceInfo
      - components
    properties:
      priceInfo:
        $ref: '#/definitions/PriceInfo'
      components:
        $ref: '#/definitions/ItineraryPriceProbingComponents'
      tourAttributes:
        type: object
        $ref: '#/definitions/TourAttributes'

  #################################################################################################
  #
  # D A T A   T Y P E S
  #
  #################################################################################################

  LocalDateTime: &LocalDateTime
    type: string
    description: |
      A "date-time" without the "time-offset", as defined by RFC 3339
    example: '2023-08-01T15:55:00'

  #################################################################################################
  #
  # R E S P O N S E S
  #
  #################################################################################################
  ItineraryResponse:
    type: object
    required:
      - itinerary
    properties:
      itinerary:
        $ref: '#/definitions/Itinerary'
      meta:
        $ref: '#/definitions/Meta'

  RecheckResponse:
    type: object
    required:
      - itinerary
      - summary
    properties:
      itinerary:
        $ref: '#/definitions/Itinerary'
      summary:
        $ref: '#/definitions/RecheckSummary'
      meta:
        $ref: '#/definitions/Meta'

  AccommodationComponentsResponse:
    type: object
    required:
      - accommodations
    properties:
      accommodations:
        type: array
        items:
          $ref: '#/definitions/AccommodationComponent'
      meta:
        $ref: '#/definitions/Meta'

  AccommodationAlternativesResponse:
    type: object
    properties:
      currentSelection:
        $ref: '#/definitions/Accommodation'
      alternatives:
        type: array
        items:
          $ref: '#/definitions/Accommodation'
      meta:
        $ref: '#/definitions/Meta'

  AccommodationOffersResponse:
    type: object
    properties:
      offers:
        type: array
        items:
          $ref: '#/definitions/AccommodationOffer'
      meta:
        $ref: '#/definitions/Meta'

  ActivityComponentsResponse:
    type: object
    required:
      - activities
    properties:
      activities:
        type: array
        items:
          $ref: '#/definitions/ActivityComponent'
      meta:
        $ref: '#/definitions/Meta'

  GenericAdHocComponentsResponse:
    type: object
    required:
      - genericAdHocComponents
    properties:
      genericAdHocComponents:
        type: array
        items:
          $ref: '#/definitions/GenericAdHocComponent'
      meta:
        $ref: '#/definitions/Meta'

  ActivityAdHocComponentsResponse:
    type: object
    required:
      - activityAdHocComponents
    properties:
      activityAdHocComponents:
        type: array
        items:
          $ref: '#/definitions/ActivityAdHocComponent'
      meta:
        $ref: '#/definitions/Meta'

  ActivityAdHocComponentsImportListResponse:
    type: object
    required:
      - componentsList
    properties:
      componentsList:
        type: array
        items:
          $ref: '#/definitions/ActivityAdHocComponentImportTitle'
      meta:
        $ref: '#/definitions/Meta'

  ActivityAdHocComponentsImportDetailsResponse:
    type: object
    required:
      - componentsList
    properties:
      componentsList:
        type: array
        items:
          $ref: '#/definitions/ActivityAdHocComponentImportDetails'
      meta:
        $ref: '#/definitions/Meta'

  RentalCarAdHocComponentsImportListResponse:
    type: object
    required:
      - componentsList
    properties:
      componentsList:
        type: array
        items:
          $ref: '#/definitions/RentalCarAdHocComponentImportTitle'
      meta:
        $ref: '#/definitions/Meta'

  RentalCarAdHocComponentsImportDetailsResponse:
    type: object
    required:
      - componentsList
    properties:
      componentsList:
        type: array
        items:
          $ref: '#/definitions/RentalCarAdHocComponentValue'
      meta:
        $ref: '#/definitions/Meta'

  TransportAdHocComponentsResponse:
    type: object
    required:
      - transportAdHocComponents
    properties:
      transportAdHocComponents:
        type: array
        items:
          $ref: '#/definitions/TransportAdHocComponent'
      meta:
        $ref: '#/definitions/Meta'

  AccommodationAdHocComponentsResponse:
    type: object
    required:
      - accommodations
    properties:
      accommodations:
        type: array
        items:
          $ref: '#/definitions/AccommodationAdHocComponent'
      meta:
        $ref: '#/definitions/Meta'

  BaseServiceOffersResponse:
    type: object
    properties:
      offers:
        type: array
        items:
          $ref: '#/definitions/BaseServiceOffer'
      meta:
        $ref: '#/definitions/Meta'

  TransferComponentsResponse:
    type: object
    required:
      - transfers
    properties:
      transfers:
        type: array
        items:
          $ref: '#/definitions/TransferComponent'
      meta:
        $ref: '#/definitions/Meta'

  TransferOffersResponse:
    type: object
    required:
      - offers
    properties:
      currentSelection:
        type: array
        items:
          $ref: '#/definitions/TransferOffer'
      offers:
        type: array
        items:
          $ref: '#/definitions/TransferOffer'
      meta:
        $ref: '#/definitions/Meta'

  RentalCarComponentsResponse:
    type: object
    required:
      - rentalCars
    properties:
      rentalCars:
        type: array
        items:
          $ref: '#/definitions/RentalCarComponent'
      meta:
        $ref: '#/definitions/Meta'

  RentalCarsOffersResponse:
    type: object
    required:
      - offers
    properties:
      currentSelection:
        $ref: '#/definitions/RentalCarOffer'
      offers:
        type: array
        items:
          $ref: '#/definitions/RentalCarOffer'

  RentalCarsOfferDetailsResponse:
    type: object
    properties:
      offer:
        $ref: '#/definitions/RentalCarOffer'
      isSelection:
        type: boolean

  FlightComponentsResponse:
    type: object
    required:
      - flights
    properties:
      flights:
        type: array
        items:
          $ref: '#/definitions/FlightComponent'
      meta:
        $ref: '#/definitions/Meta'

  FlightOffersResponse:
    type: object
    properties:
      offers:
        type: array
        items:
          $ref: '#/definitions/FlightOffer'

  BaseServiceComponentsResponse:
    type: object
    required:
      - baseServices
    properties:
      baseServices:
        type: array
        items:
          $ref: '#/definitions/BaseServiceComponent'
      meta:
        $ref: '#/definitions/Meta'

  ActivityOffersResponse:
    type: object
    properties:
      currentSelection:
        $ref: '#/definitions/ActivityOffer'
      offers:
        type: array
        items:
          $ref: '#/definitions/ActivityOffer'
      meta:
        $ref: '#/definitions/Meta'

  ActivityOfferDetailsResponse:
    type: object
    properties:
      offer:
        $ref: '#/definitions/ActivityOffer'
      meta:
        $ref: '#/definitions/Meta'

  RouteResponse:
    type: object
    required:
      - id
      - startLocation
      - endLocation
      - stops
    properties:
      id:
        type: string
      startLocation:
        $ref: '#/definitions/RoutePoint'
      endLocation:
        $ref: '#/definitions/RouteEndLocation'
      stops:
        type: array
        items:
          $ref: '#/definitions/RouteStop'
      meta:
        $ref: '#/definitions/Meta'

  ProblemResponse:
    type: object
    description: An array of Problem objects
    required:
      - status
      - problems
    properties:
      status:
        type: integer
        format: int32
        description: The HTTP status code generated for this problem response
        minimum: 100
        maximum: 600
        exclusiveMaximum: true
      problems:
        type: array
        items:
          $ref: '#/definitions/Problem'

  Problem:
    type: object
    description: A Problem object inspired by https://tools.ietf.org/html/rfc7807 (Problem Details for HTTP APIs)
    required:
      - code
      - detail
      - level
    properties:
      code:
        type: string
        description: A specific code narrowing the type of Problem down
        example: 'InputValidation'
      detail:
        type: string
        description: A human readable explanation (localized to the language of the user) of this problem
      level:
        type: string
        description: The severity of the problem
        enum:
          - ERROR
          - WARNING
      source:
        $ref: '#/definitions/ProblemSource'

  ProblemSource:
    type: object
    description: An object containing references to the source of the error
    required:
      - pointer
    properties:
      pointer:
        type: string
        description: A reference to the associated entity in the request document which caused the problem
        example: '"/data" for a primary data object or "/title" for a specific attribute'

  Meta:
    type: object
    required:
      - notifications
    properties:
      notifications:
        type: array
        items:
          $ref: '#/definitions/Notification'

  Notification:
    type: object
    required:
      - notificationType
      - message
    properties:
      notificationType:
        type: string
        enum:
          - GeneralInfo
          - GeneralError
          - ServiceUnavailable
          - NotAuthorized
      message:
        type: string
        description: Field containing the general warning / information to display to the user

  ExchangeModulesAlternativesResponse:
    type: object
    description: |
      The response object used when returning a list of module template IDs which can be
      used an an alternative for a specific module contained within the itinerary
    required:
      - alternativeModuleIds
    properties:
      alternativeModuleIds:
        type: array
        items:
          type: string

  TransportComponentsResponse:
    type: object
    description: The response object containing all the transports in an itinerary
    required:
      - transports
    properties:
      transports:
        type: array
        items:
          $ref: '#/definitions/TransportItinerary'
      meta:
        $ref: '#/definitions/Meta'

  CustomerResponse:
    type: object
    description: |
      The customer information in the itinerary
    properties:
      contact:
        $ref: '#/definitions/CustomerContact'

  PaxInfoResponse:
    type: object
    description: |
      Returns the pax info
    required:
      - paxInfo
    properties:
      paxInfo:
        type: array
        items:
          $ref: '#/definitions/PaxInfo'

  #################################################################################################
  #
  # R E Q U E S T S
  #
  #################################################################################################
  ChangeItineraryStartDateRequest:
    type: object
    description: |
      Request used in POST /{itineraryId}/start-date
    required:
      - startDate
    properties:
      startDate:
        type: string
        description: |
          The new start date for the itinerary. The start-date must correspond to a "full-date"
          as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6

  ChangeItineraryTitleRequest:
    type: object
    description: |
      Request used in PUT /{itineraryId}/title
    required:
      - title
    properties:
      title:
        type: string
        description: |
          The new title for the itinerary.

  DuplicateItineraryRequest:
    type: object
    description: |
      Request used in POST /{itineraryId}/duplicate
    properties:
      title:
        type: string
        description: |
          The title of the duplicated itinerary.

  ChangeStopDurationRequest:
    type: object
    description: |
      Request used in POST /{itineraryId}/legs/{legId}/stop/nights
    required:
      - nights
    properties:
      nights:
        type: number
        format: int32
        description: The number of nights to use for the new duration
        minimum: 1
      dayIndex:
        type: number
        format: int32
        description: The day index to start changes from
        minimum: 0

  UpdateRoomPreferencesRequest:
    type: object
    description: |
      The request sent by the caller when changing the preference for each of the rooms
      in the itinerary (i.e. whether each room has a 'twin bed' or a 'double bed')
    required:
      - rooms
    properties:
      rooms:
        type: array
        items:
          type: string
          enum:
            - TwinBed
            - DoubleBed

  SelectAccommodationOfferRequest:
    type: object
    description: |
      The request sent by the caller when selecting an accommodation offer. This will result in the
      new accommodation being inserted into the itinerary (i.e. we will either add a new accommodation
      or update an existing one)
    required:
      - offer
    properties:
      offer:
        $ref: '#/definitions/AccommodationOffer'
      amenityReferences:
        description: |
          The list of amenities belonging to this offer that should be added.
        type: array
        items:
          $ref: '#/definitions/AmenityOfferUpdateRequest'

  SelectRentalCarOfferRequest:
    type: object
    description: |
      The request sent by the caller when selecting an rental car offer. This will result in the
      new rental car being inserted into the itinerary (i.e. we will either add a new rental car
      or update an existing one)
    required:
      - offer
    properties:
      offer:
        $ref: '#/definitions/RentalCarOffer'
      amenityReferences:
        type: array
        items:
          $ref: '#/definitions/AmenityOfferUpdateRequest'

  ActivityUpsertRequest:
    type: object
    description: |
      The request sent by the client containing the information required to insert or update
      an activity. The request contains only the pertinent information required
      to create the desired activity component, which is then either inserted or updated in the itinerary.

      The information sent here can be found as part of the ActivityOffer.
    required:
      - productId
    properties:
      startDate:
        type: string
        description: |
          The start date used when searching for activity offers. This value was sent back as
          part of an 'ActivityOffer' and corresponds to a "full-date"
          as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      rooms:
        type: array
        items:
          $ref: '#/definitions/OccupancyBasedActivityRoomDetailUpsertRequest'
        description: |
          The selected rooms information used when creating activity offers. This value was sent back as
          part of an 'ActivityOffer' and corresponds to the RoomType
      productId:
        type: string
        description: |
          Nezasa ID which references the activity product. This corresponds to the 'productId'
          attribute found in an ActivityOffer
      serviceCategoryId:
        type: string
        description: |
          This is the ID of one of the ServiceCategoryOffers sent as part of the ActivityOffer.
      serviceCategories:
        type: array
        items:
          $ref: '#/definitions/ActivityUpsertRequestServiceCategory'
        description: |
          To be used as an alternative to serviceCategoryId for specifying the service categories 
          (i.e. tickets) and their quantities manually. 
          This is the recommended approach for the Musement integration.
      startTime:
        type: string
        description: |
          An optional attribute, which if specified, is the start time to use for an
          activity with multiple starting times. The value is formatted as "time-hour" ":" "time-minute"
          as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      amenityReferences:
        type: array
        items:
          $ref: '#/definitions/AmenityReference'
      areaRefId:
        type: string
        description: |
          Required to univocally identify a stop to add activites. It's not enought to use a date because the last day on a stop can
          have the same date as the firs day of a following stop. We use areaRefId to remove the ambiguity.
      source:
        type: string
        description: |
          Required to univocally identify an activity if several soureces are configured.
      paxSelection:
        type: array
        description: |
          The list of PAX IDs to book this activity for (eg. pax-1, pax-2, pax-3)
        items:
          type: string
      selectedLanguage:
        type: string
        description: |
          The ISO 639-1 language code of the selected language for the activity.
      pickupLocationRefId:
        type: string
        description: |
          Musement specific UUID for the pickup point for the activity.

  ActivityUpsertRequestServiceCategory:
    type: object
    required:
      - serviceCategoryId
      - quantity
    properties:
      serviceCategoryId:
        type: string
      quantity:
        type: integer
        minimum: 1

  BaseServiceUpsertRequest:
    type: object
    description: |
      The request sent by the client containing the information required to insert or update
      a base service. The request contains only the pertinent information required
      to create the desired base service component, which is then either inserted or updated in the itinerary.

      The information sent here can be found as part of the BaseServiceOffer.
    required:
      - id
      - serviceCategoryId
    properties:
      id:
        type: string
        description: |
          Nezasa ID which references the base service product. This corresponds to the 'id'
          attribute found in a BaseServiceOffer
      serviceCategoryId:
        type: string
        description: |
          This is the ID of the ServiceCategoryOffer sent as part of the selected BaseServiceOffer.
      coveredLegs:
        type: array
        items:
          type: string
        description: |
          An array containing the IDs the legs that should be covered by the base service

  BookingStatus:
    type: string
    enum: &BookingStatus
      - Open
      - OnRequest
      - Booked
      - NonBookable
      - Cancelled
      - None

  AdhocActivityType:
    type: string
    enum: &AdhocActivityType
      - Tour
      - Package
      - Ticket
      - Cruise
      - Other

  GenericAdHocComponentUpsertRequest:
    type: object
    description: |
      The request sent by the client containing the information required to insert or update
      a generic ad-hoc component. The request contains only the pertinent information required
      to create the desired ad-hoc component, which is then either inserted or updated in the itinerary.
    required:
      - name
      - description
      - netPrice
      - salesPrice
    properties:
      name:
        type: string
        description: |
          Name of the ad-hoc generic component
      startDate:
        type: string
        description: |
          The start date of the component. Providing a startDate requires that an
          endDate is provided as well. The endDate must not be before the startDate.
          This value corresponds to a "full-date" as
          defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
      endDate:
        type: string
        description: |
          The end date of the component. Providing a endDate requires that a
          startDate is provided as well. The endDate must not be before the startDate.
          This value corresponds to a "full-date" as
          defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
      supplier:
        type: string
        description: |
          ID/name of the component supplier
      supplierConfirmationNumber:
        type: string
        description: |
          The confirmation number on the supplier
      description:
        type: string
        description: |
          Description of the ad-hoc generic component
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The net price set for the ad-hoc generic component
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The sales price set for the ad-hoc generic component
      hidden:
        type: boolean
        description: |
          Whether or not the component is hidden from the customer (defaults to false)
      bookingStatus:
        type: string
        enum: *BookingStatus
        description: |
          The state of the booking
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'

  ActivityAdHocComponentUpsertRequest:
    type: object
    description: |
      The request sent by the client containing the information required to insert or update
      an activity ad-hoc component. The request contains only the pertinent information required
      to create the desired ad-hoc component, which is then either inserted or updated in the itinerary.
    required:
      - name
      - description
      - startDateTime
      - endDateTime
      - netPrice
      - salesPrice
    properties:
      name:
        type: string
        description: |
          Name of the ad-hoc activity component
      supplierConfirmationNumber:
        type: string
        description: |
          The confirmation number on the supplier
      supplierRef:
        $ref: '#/definitions/SupplierRef'
        description:
          A supplier reference is defined by just one of either `refId`, `contact`, `contactRefId`, or `name`.
          If multiple are defined, only one will be considered and the others are ignored.
      description:
        type: string
        description: |
          Description of the ad-hoc generic component
      legId:
        type: string
        description: |
          The id of the leg to add the stop ad-hoc activity component
      locationRefId:
        type: string
        description: |
          The refId of the location for a stop ad-hoc activity component
      startLocationRefId:
        type: string
        description: |
          The refId of the start location for a connection ad-hoc activity component
      endLocationRefId:
        type: string
        description: |
          The refId of the end location for a connection ad-hoc activity component
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The net price set for the ad-hoc generic component
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The sales price set for the ad-hoc generic component
      bookingStatus:
        type: string
        enum: *BookingStatus
        description: |
          The state of the booking
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      activityType:
        type: string
        enum: *AdhocActivityType

  AdhocActivityInsertRequest:
    type: object
    description: |
      As of now, only requests containing a single ad-hoc activity component are accepted as valid. The array of activities is to support future enhancements
      The request by the client containing the information required to insert one or many activity ad-hoc components.
      The request contains only the pertinent information required to create the desired ad-hoc component, which is then
      inserted in the itinerary.
    required:
      - activityData
    properties:
      activityData:
        type: array
        items:
          $ref: '#/definitions/ActivityAdHocComponentUpsertRequest'

  TransportAdhocInsertRequest:
    type: object
    description: |
      A request for inserting new transport ad hoc components
    properties:
      outboundTransport:
        $ref: '#/definitions/TransportAdHocComponentUpsertRequest'
      inboundTransport:
        $ref: '#/definitions/TransportAdHocComponentUpsertRequest'
      multicityTransports:
        type: array
        items:
          $ref: '#/definitions/TransportAdHocMulticityInsertRequest'

  TransportAdHocMulticityInsertRequest:
    type: object
    required:
      - componentRefId
      - transportData
    properties:
      componentRefId:
        type: string
        description: |
          The refId of the existing component (particularly a placeholder) that we want to replace.
      transportData:
        $ref: '#/definitions/TransportAdHocComponentUpsertRequest'

  TransportAdHocComponentUpsertRequest:
    type: object
    description: |
      A request for updating an existing transport ad hoc component or used to insert a new one, 
      when sent in the context of a TransportAdhocInsertRequest.
    required:
      - segments
      - netPrice
      - salesPrice
    properties:
      segments:
        type: array
        items:
          $ref: '#/definitions/TransportAdHocSegmentUpsertRequest'
      supplierConfirmationNumber:
        type: string
        description: |
          The confirmation number on the supplier
      supplierRef:
        $ref: '#/definitions/SupplierRef'
        description:
          A supplier reference is defined by just one of either `refId`, `contact`, `contactRefId`, or `name`.
          If multiple are defined, only one will be considered and the others are ignored.
      bookingStatus:
        type: string
        enum: *BookingStatus
        description: |
          The state of the booking
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The net price set for the transport ad-hoc component
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The sales price set for the transport ad-hoc component
      includedTaxes:
        $ref: '#/definitions/MonetaryAmount'
        description: The taxes (included in the net price) set for the transport ad-hoc component

  TransportAdHocSegmentUpsertRequest:
    type: object
    description: |
      The payload describing a transport ad hoc segment.
    required:
      - transportType
      - transportClass
      - startLocationRefId
      - endLocationRefId
      - startDateTime
      - endDateTime
    properties:
      transportType:
        type: string
        enum:
          - Bus
          - Flight
          - Train
      transportClass:
        type: string
        description: |
          `Economy`, `PremiumEconomy`, `Business` or `First` for `transportType: Flight`<br>
          `First` or `Second` for `transportType: Train`<br>
          `First` or `Second` for `transportType: Bus`
        enum:
          - First
          - Second
          - Business
          - Economy
          - PremiumEconomy
      carrierCode:
        type: string
        description: |
          The carrier code for this segment, e.g. "EK" in flight "EK 448"
      transportNumber:
        type: string
        description: |
          The transport number for this segment, e.g. "448" in flight "EK 448"
      startLocationRefId:
        type: string
        description: |
          The area refId or airport IATA code for the start location of the segment
      endLocationRefId:
        type: string
        description: |
          The area refId or airport IATA code for the end location of the segment
      startDateTime: *LocalDateTime
      endDateTime: *LocalDateTime

  AccommodationAdHocComponentUpsertRequest:
    type: object
    description: |
      A request for updating an existing accommodation ad hoc component or used to insert a new one, 
      when sent in the context of a AccommodationAdhocInsertRequest.
    required:
      - name
      - description
      - startDateTime
      - endDateTime
      - location
      - areaRefId
      - legId
      - netPrice
      - salesPrice
    properties:
      name:
        type: string
        description: |
          Name of the ad-hoc accommodation component
      description:
        type: string
        description: |
          Description of the ad-hoc accommodation component
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The net price set for the accommodation ad-hoc component
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The sales price set for the accommodation ad-hoc component
      areaRefId:
        type: string
        description: |
          The refId of the location for a stop ad-hoc accommodation component
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      legId:
        type: string
        description: |
          The id of the leg to add the stop ad-hoc activity component
      rating:
        type: number
        format: double
        description: The rating of the accommodation
      rooms:
        type: array
        items:
          $ref: '#/definitions/AccommodationAdHocRoom'
      location:
        $ref: '#/definitions/GeoLocation'
        description: The accommodation home address
      supplierRef:
        $ref: '#/definitions/SupplierRef'
        description:
          A supplier reference is defined by just one of either `refId`, `contact`, `contactRefId`, or `name`.
          If multiple are defined, only one will be considered and the others are ignored.
      supplierConfirmationNumber:
        type: string
        description: |
          The confirmation number on the supplier
      bookingStatus:
        type: string
        enum: *BookingStatus
        description: |
          The state of the booking

  OccupancyBasedActivityRoomDimensionUpsertRequest:
    type: object
    required:
      - min
      - max
    properties:
      roomCode:
        type: string
      roomType:
        type: string
      occupancy:
        type: integer
        format: int32
      min:
        type: integer
        format: int32
      max:
        type: integer
        format: int32

  OccupancyBasedActivityRoomDetailUpsertRequest:
    type: object
    description: |
      The room information included in OccupancyBasedActivityUpsertRequest.
    required:
      - roomCategoryId
      - roomDimension
    properties:
      roomCategoryId:
        type: string
      numAdults:
        type: integer
        format: int32
        description: |
          Number of PAX in this room.
      childAges:
        type: array
        items:
          type: integer
          format: int32
        description: |
          The list of ages from the children in this room.
      numPax:
        type: integer
        format: int32
        description: |
          DEPRECATED:
          This attribute has been deprecated in favor of 'numAdults'.
          Number of PAX in this room.
      roomDimension:
        $ref: '#/definitions/OccupancyBasedActivityRoomDimensionUpsertRequest'
      paxSelection:
        type: array
        items:
          type: string
        description: |
          The list of PAX IDs to book this room for (eg. pax-1, pax-2)

  ExchangeModuleRequest:
    type: object
    description: |
      The request sent by the client containing the information required to exchange
      an existing module with a new one
    required:
      - alternativeModuleId
    properties:
      alternativeModuleId:
        type: string
        description: |
          This ID refers to a managed module template which was either previously returned
          by a call to modules/{moduleId}/alternatives or from the Discovery API

  RouteUpdateRequest:
    type: object
    description: |
      Updates itinerary modifying route stops and/or start/end locations
    properties:
      startLocation:
        $ref: '#/definitions/Location'
        description: |
          The new start location to use for the itinerary. If no start location
          is defined as part of the request or if the module in question is not
          the first module in the itinerary list, then the existing start location
          is left untouched.
      endLocation:
        $ref: '#/definitions/RouteUpdateEndLocation'
        description: |
          The new end location (along with the chain of connections) to use for the itinerary.
          If no end location is defined as part of the request then the existing end location
          is left untouched.
      stops:
        type: array
        items:
          $ref: '#/definitions/RouteUpdateStop'
        description: |
          The new list of stops with associated connections to use. If no stops are defined
          then the existing list of stops currently found on the itinerary is used.

  CustomerUpdateRequest:
    type: object
    description: |
      Updates the customer data in the itinerary
    required:
      - contact
    properties:
      contact:
        $ref: '#/definitions/CustomerContact'

  TransferOfferUpdateRequest:
    type: object
    description: |
      The request object sent by the caller containing the information for the
      transfer offer to use.
    required:
      - offerId
      - serviceCategoryOfferId
      - componentSource
    properties:
      offerId:
        type: string
        description: The ID corresponding to the selected TransferOffer
      serviceCategoryOfferId:
        type: string
        description: The ID of the ServiceCategoryOffer
      amenityReferences:
        type: array
        items:
          $ref: '#/definitions/AmenityOfferUpdateRequest'
      componentSource:
        type: string

  AmenityOfferUpdateRequest:
    type: object
    description: |
      Container which holds the selected AmenityOffer ID along with the number of pax
      to apply this amenity to.
    required:
      - amenityOfferId
    properties:
      amenityOfferId:
        type: string
        description: The ID of the AmenityOffer
      paxMultiplier:
        type: integer
        description: |
          Also known as the quantity it represents the number of amenities selected. If
          not defined the amenity offer will be applied to all PAX on the itinerary.

  PaxInfoUpdateRequest:
    type: object
    description: |
      Request used in PUT /{itineraryId}/pax-info
    required:
      - paxInfo
    properties:
      paxInfo:
        type: array
        items:
          $ref: '#/definitions/PaxInfo'

  #################################################################################################
  #
  # V I E W S
  #
  #################################################################################################

  Timezone: &Timezone # see https://en.wikipedia.org/wiki/Tz_database
    type: string
    description: The local time zone in the TZ database format (e.g. Area/Location).
    example: 'Europe/Zurich'

  AreaOrAreaDescriptionSupplier: &AreaOrAreaDescriptionSupplier
    type: string
    description: |
      For areas or area descriptions which are managed by the tour operator, the supplier value is the tour
      operator's refId. For Nezaza-owned areas and area descrptions, the supplier value is "Nezasa"
    example: 'Nezasa'

  TransportType:
    type: string
    enum: &TransportType
      - Bus
      - Flight
      - Train

  TransportFareType:
    type: string
    enum: &TransportFareType
      - Pubneg
      - Pub
      - Neg
      - Net
      - TourOperator
      - LowCost

  TransportConnectionType:
    type: string
    enum: &TransportConnectionType
      - Inbound
      - Outbound
      - MultiCity

  TransportPnrReservationSystem:
    type: string
    enum: &TransportPnrReservationSystem
      - CRS_AF_KLM
      - CRS_AMADEUS
      - CRS_BA
      - CRS_CONDOR
      - CRS_EASYJET
      - CRS_EDW
      - CRS_EMIRATES_NDC
      - CRS_EUROWINGS
      - CRS_FARELOGIX
      - CRS_GALILEO
      - CRS_IB
      - CRS_KIWI
      - CRS_LHGROUP
      - CRS_SABRE
      - CRS_TRAVELFUSION
      - CRS_TK
      - CRS_VUELING
      - CRS_XQ_NDC
      - CRS_YPSILON

  CustomerContact:
    type: object
    description: |
      The customer contact data
    required:
      - email
      - firstName
      - lastName
      - phone
      - street
      - postalCode
      - city
      - country
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      street:
        type: string
      street2:
        type: string
      postalCode:
        type: string
      city:
        type: string
      state:
        type: string
      country:
        type: string

  TransportMeans:
    # see com.nezasa.model.comp.TransferType
    type: string
    enum: &TransportMeans
      - Bus
      - Shuttle
      - Flight
      - Boat
      - Train
      - Activity
      - CarActivity
      - RentalCar
      - OwnCar
      - CarFerry
      - Motorcycle
      - Bicycle
      - Walk

  LocationType:
    type: string
    enum: &LocationType
      - Airport
      - Area
      - GeoPoint

  AmenityReference:
    type: object
    description: |
      This model describes an amenity change request. It specifies the amenity reference ID along
      with the PAX multipler (if the amenity happens to allow a PAX multiplier).

      As an amenity is an additional service and facility provided by a product, its reference
      ID only has meaning within a specific product. Amenity references are part of
      offers (e.g. ActivityOffer) and are either always included and thus free of additional charge,
      or they are an optional amenity with a price. An amenity can also define whether it supports
      a per-PAX multipler meaning that the number of PAX applicable for this amenity can be specified.
    required:
      - id
    properties:
      id:
        type: string
        description: An amenity reference id
      paxMultiplier:
        type: number
        format: int32
        description: |
          If defined, and if allowed by the amenity, this value represents the number of PAX
          for which this amenity applies.
      paxSelection:
        type: array
        uniqueItems: true
        description: |
          A list of PAX ref ID (eg. pax-1). Identifiers of the pax for which this amenity selected
        items:
          type: string

  Itinerary:
    type: object
    description: |
      This view object is a representation of our Itinerary model. It provides callers with
      the structure as well as pertinent information pertaining to their entire trip.

      At its core a trip is composed of connections, stops, and activities. However, in order to faciliate
      reuse and swapping out of trip segments, we group trip components into modules. It is this grouping
      of modules together with a starting point and ending point that gives the Itinerary its overall
      structure.
      ```
      +-------------------------+
      |  +-----------------+    |
      |  |   Start         |    |
      |  |   Connections   |    |
      |  +--------+--------+    |
      |           |             |
      | +---------+---------+   |
      | |  Start Location   |   |
      | +---------+---------+   |
      |           |             |
      |      +----+----+        |
      |      |         |        |
      |      |   M1    |   +    |
      |      |         |   |    |
      |      +----+----+   |    |
      |           |        |    |
      |      +----+----+   |    +
      |      |         |   | Modules
      |      |  M2     |   |    +
      |      |         |   |    |
      |      +----+----+   |    |
      |           |        |    |
      |      +----+----+   |    |
      |      |         |   |    |
      |      |  Mn     |   +    |
      |      |         |        |
      |      +----+----+        |
      |           |             |
      |  +--------+--------+    |
      |  |   Return        |    |
      |  |   Connections   |    |
      |  +--------+--------+    |
      |           |             |
      | +---------+---------+   |
      | |    End Location   |   |
      | +-------------------+   |
      +-------------------------+
      ```
    required:
      - id
      - title
      - lastModified
      - startDate
      - endDate
      - priceInfo
      - surcharges
      - modules
      - availabilities
    properties:
      id:
        type: string
        description: The ID of the itinerary
      title:
        type: string
      lastModified:
        type: string
      templateId:
        type: string
        description: |
          If present it is the ID of the itinerary-template from which this itinerary was generated. Not
          all itineraries have a static itinerary-template backing them. Itineraries-from-Scratch, for example,
          have a dynamically generated itinerary-template and as such, do not contain a `templateId`
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      priceInfo:
        $ref: '#/definitions/PriceInfo'
      surcharges:
        type: array
        items:
          $ref: '#/definitions/TourOperatorSurcharge'
      travelAgency:
        type: object
        $ref: '#/definitions/TravelAgencyDetails'
      customerContact:
        type: object
        $ref: '#/definitions/PaxContact'
      paxDetails:
        type: array
        items:
          $ref: '#/definitions/PaxDetails'
      allocatedPax:
        type: object
        $ref: '#/definitions/PaxAllocation'
      cancellationPolicy:
        type: object
        $ref: '#/definitions/CancellationPolicy'
      departureLocation:
        $ref: '#/definitions/GeoLocation'
        description: The "home" location where the traveler is departing from
      modules:
        type: array
        items:
          $ref: '#/definitions/Module'
      startConnections:
        type: array
        items:
          $ref: '#/definitions/Connection'
        description: |
          The start connections bring the travelers to the start location of the itinerary. Currently they
          store the main incoming international flight, if one is present on the itinerary.
      returnConnections:
        type: array
        items:
          $ref: '#/definitions/Connection'
        description: |
          The return connections provide a way to bring the travelers from the last module to the end location
      tourAttributes:
        type: object
        $ref: '#/definitions/TourAttributes'
      infoSections:
        type: array
        items:
          $ref: '#/definitions/InfoSection'
      transportAdHocComponents:
        type: array
        items:
          $ref: '#/definitions/TransportAdHocComponent'
      simpleTransportComponents:
        type: array
        items:
          $ref: '#/definitions/SimpleTransportComponent'
      availabilities:
        type: object
        $ref: '#/definitions/ItineraryAvailabilities'
      language:
        type: string
        description: The ISO 639-1 language code that is used for localizing text for this itinerary
      startLocation:
        $ref: '#/definitions/GeoLocation'
      endLocation:
        $ref: '#/definitions/GeoLocation'

  RecheckSummary:
    description: |
      The object containing various aspects of the itinerary recheck, such
      as rechecked components and general recheck remarks.
    type: object
    properties:
      components:
        description: |
          The result per component of the recheck, containing base information about
          each component and the result of the recheck (e.g., not available anymore).
        type: array
        items:
          $ref: '#/definitions/RecheckedComponent'
      remarks:
        description: |
          A list of general findings by the recheck. The information may contain hints such as
          pointing out that a stop has no hotel yet.
        type: array
        items:
          type: string

  RecheckedComponent:
    description: |
      The object contains the relevant information about a component after the
      rechecked has been performed. Note that the components have been updated
      as well accordingly in the itinerary itself.
    type: object
    required:
      - id
      - componentType
      - status
      - nonBookable
      - price
    properties:
      id:
        description: |
          The ID of the component. Can be matched against the components in the
          itinerary object in order to gather more details about the component.
        type: string
      componentType:
        type: string
      status:
        description: |
          Describes the status of the component after the availability check:

          * Open: it is available
          * OnRequest: it is available on request
          * Booked: it is booked
          * NonBookable: it is not available (hint: the `nonBookable` can be `true` even if status is not `NonBookable`)
          * Cancelled: it was booked, and then cancelled successfully
          * None: it has a unknown status
        type: string
        enum:
          - Open
          - OnRequest
          - Booked
          - NonBookable
          - Cancelled
          - None
      nonBookable:
        description: |
          Indicates whether the component can be booked as is or not. Booking attempts
          of itineraries with non-bookable components may fail depending on the reason
          why the component is non-bookable.
        type: boolean
      nonBookableReason:
        description: |
          If possible, the system tries to indicate a reason why a component might be
          non-bookable. Not all reasons will block the actual booking of the itinerary,
          see their descriptions below. The following reasons are currently in use:

          * NoAvailability: the component is no longer available.
          * DateTimeConflict: the flight component as a date/time that conflicts with other connection
          * PaxSelectionConflict: the flight ocmponent has a pax selection that confliects with another flight
          * Cancelled: the component has been cancelled
          * NonFittingToItinerary: the component is no longer aligned to the current itinerary structure
          * NonFittingLocations: the component's start and/or end locations are not aligned with the itinerary locations immediately before and/or after. This is only only flagged as a warning, and may not be actual an issue for the booking.
          * UnschedulableComponentNoLocationFound: indicates that the component cannot currently be scheduled due to an incorrect itinerary structure.
          * NonFittingButAccepted: indiciates that this component doesn't fit but has been marked by the user as accepted for booking nevertheless.
          * NoTicketsSelected: this component needs individual tickets to be assigned in order to be booked
          * Unknown
        type: string
        enum:
          - NoAvailability
          - DateTimeConflict
          - PaxSelectionConflict
          - Cancelled
          - NonFittingToItinerary
          - NonFittingLocations
          - NonFittingButAccepted
          - NoTicketsSelected
          - UnschedulableComponentNoLocationFound
          - Unknown
      price:
        description: |
          The up-to-date (sales) price of the component. The recheck might have updated
          the price due to the latest information by the supplier.
        $ref: '#/definitions/MonetaryAmount'
      previousPrice:
        description: |
          If the recheck resulted in an updated price, then this attribute will
          the previous price. Otherwise, the attribute will not be set.
        $ref: '#/definitions/MonetaryAmount'
      name:
        description: |
          A localized name representing the component, e.g., the hotel or activity name.
        type: string
      startDate:
        description: |
          A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
          representing the start date of component if applicable, e.g., hotel check-in date.
        type: string
      endDate:
        description: |
          A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
          representing the end date of component if applicable, e.g., hotel check-out date.
        type: string
      locationName:
        description: |
          A reference to the location of the component, usually the city name.
        type: string

  CancellationPolicy:
    type: object
    required:
      - name
      - tourOperator
      - minimumFee
      - minimumFeeCurrency
      - processingFee
      - processingFeeCurrency
      - processingFeeUnit
      - cancellations
    properties:
      name:
        type: string
      tourOperator:
        type: string
      minimumFee:
        $ref: '#/definitions/MonetaryAmount'
      processingFee:
        $ref: '#/definitions/MonetaryAmount'
      processingFeeUnit:
        type: string
      processingFeeMax:
        type: number
        format: double
      cancellations:
        type: array
        items:
          $ref: '#/definitions/CancellationPolicyRule'

  CancellationPolicyRule:
    type: object
    required:
      - rangeStart
      - cancellationPercentage
      - applicableTo
    properties:
      rangeStart:
        type: integer
      rangeEnd:
        type: integer
      cancellationPercentage:
        type: number
        format: double
      applicableTo:
        type: array
        items:
          type: string

  PaxContact:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      mobilePhone:
        type: string
      gender:
        type: string
        enum:
          - Female
          - Male
      address1:
        type: string
      address2:
        type: string
      city:
        type: string
      zip:
        type: string
      countryCode:
        type: string

  PaxDetails:
    type: object
    properties:
      id:
        type: string
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      age:
        type: integer
        format: int32
        description: |
          When an exact age is given, this is that value. If the dateOfBirth was introduced, this represents the age at the start of the itinerary.
      passportNr:
        type: string
      gender:
        type: string
        enum:
          - Female
          - Male
      dateOfBirth:
        type: string
      nationality:
        type: string
      tags:
        type: array
        items:
          type: string
        description: |
          The list of generic labels associated with this PAX

  PaxInfo:
    type: object
    properties:
      id:
        type: string
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      age:
        type: integer
        format: int32
        description: |
          When an exact age is given, this is that value. If the dateOfBirth was introduced, this represents the age at the start of the itinerary.
      gender:
        type: string
        enum:
          - Female
          - Male

  PaxAllocation:
    type: object
    required:
      - rooms
    properties:
      rooms:
        type: array
        items:
          $ref: '#/definitions/RoomAllocation'

  RoomAllocation:
    type: object
    required:
      - adults
      - childAges
      - roomPreferences
    properties:
      adults:
        type: integer
        format: int32
      childAges:
        type: array
        items:
          type: integer
          format: int32
      roomPreferences:
        type: array
        items:
          type: string
          enum:
            - NotAvailable
            - DoubleBed
            - TwinBed
            - Smoking
            - NonSmoking
      roomType:
        type: string
        enum:
          - Single
          - Double
          - Triple
          - Quadruple
          - Tent
          - MultiBed

  Module:
    type: object
    description: |
      The Module is our projection of our internal Module structure to the outside world. As briefly
      mentioned in the description for the Itinerary, a Module serves as a container to group
      elements of a trip together. This not only provides greater reuse when creating trips but allows
      these bundles of trip-elements to be easily swapped out for another set of elements (assuming
      that these bundles "fit" together)

      Each module has a start and end location and is composed of a series of legs (see Leg). Each leg
      in turn houses a set of feeder connections and a stop - the idea being that the feeder connections
      bring you from one leg (or the start location if it happens to be the first leg) to your stop.

      In addition a module also contains a list of return-connections which bring the PAX either from ther
      last leg in their trip back to the end location or (if there are no legs), then from the start location
      to tne end location. For example, you can have a module starting in New York and ending in Chicago with
      one rental car connection. This connection would be found in the return-connections
      ```
      +-------------------------+
      | +-------------------+   |
      | |   Start Location  |   |
      | +---------+---------+   |
      |           |             |
      |      +----+-----+       |
      |      |          |       |
      |      |   L1     |   +   |
      |      | (Stop 1) |   |   |
      |      +----+-----+   |   |
      |           |         |   |
      |      +----+-----+   |   +
      |      |          |   | Legs
      |      |  L2      |   |   +
      |      | (Stop 2) |   |   |
      |      +----+-----+   |   |
      |           |         |   |
      |      +----+-----+   |   |
      |      |          |   |   |
      |      |  Ln      |   +   |
      |      | (Stop N) |       |
      |      +----+-----+       |
      |           |             |
      |  +--------+---------+   |
      |  |    Return        |   |
      |  |    Connections   |   |
      |  +--------+---------+   |
      |           |             |
      | +---------+----------+  |
      | |    End Location    |  |
      | +--------------------+  |
      +-------------------------+
      ```
    required:
      - id
      - startLocation
      - endLocation
      - moduleType
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this module
      startLocation:
        $ref: '#/definitions/GeoLocation'
      endLocation:
        $ref: '#/definitions/GeoLocation'
      legs:
        type: array
        items:
          $ref: '#/definitions/Leg'
      returnConnections:
        type: array
        items:
          $ref: '#/definitions/Connection'
      moduleType:
        type: string
        enum:
          - Tour
          - SingleHotel
          - FIT
      tourAttributes:
        type: object
        $ref: '#/definitions/TourAttributes'
      infoSections:
        type: array
        items:
          $ref: '#/definitions/InfoSection'
      supportsRouteBuilder:
        type: boolean
        description: |
          Indicates whether the route builder is enabled for this module. If enabled, the user can
          modify the route of the module.

  Leg:
    type: object
    description: |
      A Leg is a container object which houses a series of feeder connections and a stop. The purpose
      of the feeder connections is to bring the PAX from either the start location (if this happens to
      be the first leg) or from a previous leg to the stop.

      ```
      +-------------------------+
      | +-----------------+     |
      | |      C1         |  +  |
      | +----+------------+  |  |
      |      |               |  |
      | +----+------------+  |  |
      | |      C2         |  | Connections
      | +----+------------+  |  |
      |      |               |  |
      | +----+------------+  |  |
      | |      Cn         |  +  |
      | +----+------------+     |
      |      |                  |
      | +----+------------+     |
      | |                 |     |
      | |  Stop           |     |
      | | (Area, Nights)  |     |
      | |                 |     |
      | +-----------------+     |
      +-------------------------+
      ```
    required:
      - id
      - startDate
      - stop
    properties:
      id:
        type: string
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      connections:
        type: array
        items:
          $ref: '#/definitions/Connection'
      stop:
        $ref: '#/definitions/Stop'

  Stop:
    type: object
    description: |
      Describes the period in which a traveler stays in one area. This also includes the hotels (accommodations)
      for the entire duration of the stop.
    required:
      - stopLocation
      - area
      - nights
      - accommodations
      - startDate
    properties:
      stopLocation:
        $ref: '#/definitions/StopLocation'
      area:
        $ref: '#/definitions/Area'
        description: |
          DEPRECATED:
          This attribute has been deprecated in favor of 'stopLocation' as stops support both
          areas and airports.
      areaDescription:
        $ref: '#/definitions/AreaDescription'
      nights:
        type: integer
        format: int32
      maxNights:
        type: integer
        format: int32
        description: Maximum number of nights this stop can be.
      minNights:
        type: integer
        format: int32
        description: Minimum number of nights this stop can be.
      accommodations:
        type: array
        items:
          $ref: '#/definitions/AccommodationComponent'
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      activities:
        type: array
        items:
          $ref: '#/definitions/ActivityComponent'

  AccommodationComponent:
    type: object
    description: |
      An AccommodationComponent describes an accommodation in the itinerary.
    required:
      - id
      - productId
      - name
      - nights
      - salesPrice
      - source
      - startDate
      - rooms
      - isOnRequest
      - externalRefs
      - nonBookable
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this accommodation view
      productId:
        type: string
        description: A unique ID identifying the accommodation
      name:
        type: string
      description:
        $ref: '#/definitions/AccommodationDescription'
      nights:
        type: integer
        format: int32
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for all PAX for the entire duration of their stay in this room
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net prices for all PAX for the entire duration of their stay in this room
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price in the supplier's currency
      externallyPaidCharges:
        type: array
        items:
          $ref: '#/definitions/ExternallyPaidCharge'
      location:
        $ref: '#/definitions/GeoLocation'
      source:
        type: string
        description: |
          An indicator of what type of accommodation we are dealing with here.
          * User
            + This accommodation must be defined by the user. That is, it indicates that no hotel has
              currently been selected
          * Nezasa
            + This accommodation is defined in the Nezasa inventory
        enum:
          - User
          - Nezasa
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      supplier:
        type: string
      isOnRequest:
        type: boolean
      contact:
        $ref: '#/definitions/ContactDetails'
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      rooms:
        type: array
        items:
          $ref: '#/definitions/AccommodationComponentRoom'
      tags:
        type: array
        items: { type: string }
      amenities:
        type: array
        items:
          $ref: '#/definitions/Amenity'
      nonBookable:
        type: boolean
        description: A non bookable accommodation is a component that was previously added to an itinerary but is not available anymore.
      bookingInfo:
        $ref: '#/definitions/BookingInfo'
        description: The booking information for the component
      pictures:
        description: |
          The metadata for the accommodation product's pictures (managed in the Inventory)
        type: array
        items:
          $ref: '#/definitions/Picture'
      thumbnailUrl:
        description: |
          The URL of the accommodation thumbnail
        type: string
      externalComment:
        type: string
      externalCommentExpiration:
        type: string
      officialRating:
        type: string
        description: The official rating of the accommodation
      cancellationPolicy:
        $ref: '#/definitions/ComponentCancellationPolicy'

  AccommodationDescription:
    type: object
    properties:
      keySentence:
        type: string
        description: |
          A key sentence (mas 120 characters) describing the accommodation.
      longDescription:
        type: string
        description: |
          HTML encoded description of the accommodation.
      descriptionSource:
        type: string
        enum:
          - GIATA
          - OTHER
      attribution:
        type: string
      hotelInfo:
        type: string
      externalComment:
        type: string
      externalCommentExpiration:
        type: string
        description: |
          A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      giataContractId:
        type: string

  TravelAgencyDetails:
    type: object
    description: Contact details
    required:
      - refId
      - address1
      - city
      - zip
      - phone
    properties:
      refId:
        type: string
        description: The id that can be used to identify this travel agency in our system
      name:
        type: string
      address1:
        type: string
      city:
        type: string
      zip:
        type: string
      phone:
        type: string
      address2:
        type: string
      emergencyPhone:
        type: string
      email:
        type: string
      website:
        type: string
      comment:
        type: string

  ContactDetails:
    type: object
    description: Contact details
    required:
      - address1
      - city
      - zip
      - phone
    properties:
      name:
        type: string
      address1:
        type: string
      city:
        type: string
      zip:
        type: string
      phone:
        type: string
      address2:
        type: string
      emergencyPhone:
        type: string
      email:
        type: string
      website:
        type: string
      comment:
        type: string

  AccommodationComponentRoom:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
      name:
        type: string
      code:
        type: string
      type:
        type: string
      description:
        type: string
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      meal:
        type: string
        description: |
          If the information is supplied by the hotel supplier, this field contains a description of the
          type of meal plan attached to this room.
      mealCode:
        type: string
        description: |
          If the information is supplied by the hotel supplier, this field contains the internal meal code attached to this room.

  AccommodationAdHocRoom:
    type: object
    required:
      - name
      - meal
    properties:
      componentId:
        type: string
      name:
        type: string
      meal:
        type: string

  Accommodation:
    type: object
    description: An alternative accommodation offer
    required:
      - id
      - name
      - location
      - externalRefs
      - isOnRequest
      - recommended
    properties:
      id:
        type: string
        description: Nezasa ID which references the hotel product for this offer.
      name:
        type: string
      officialRating:
        type: string
        description: The official rating of the accommodation
      location:
        $ref: '#/definitions/GeoLocation'
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for all PAX for the entire duration of their stay in this room
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      isRefundable:
        type: boolean
        description: |
          If this attribute is not present in the response, then the backend has no information whether
          the offer will be refunded when cancelled. Otherwise, a value of true indicates that the offer is
          refundable.
      isOnRequest:
        type: boolean
      recommended:
        type: boolean
      facts:
        type: array
        items:
          $ref: '#/definitions/OfferFact'
        description: |
          A list of facts about the hotel, e.g., wifi, swimming pool.
      ratings:
        type: array
        items:
          $ref: '#/definitions/ProductRating'
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      source:
        type: string
        description: |
          The offer source which can be used when searching for the offer details.
      provider:
        type: string
        description: |
          The offer provider from within the source. This is particularly useful when dealing with aggregators such as TravelGateX and iVectorOne.
          Example - Source is TravelGateX and Provider is Hotelbeds.
        example: 'Hotelbeds'
      rooms:
        type: array
        items:
          $ref: '#/definitions/RoomInfo'

  AccommodationOffer:
    type: object
    description: The AccommodationOffer contains detailed information pertaining to specific accommodation offer
    required:
      - id
      - productId
      - name
      - location
      - startDate
      - serviceCategoryIds
      - isOnRequest
      - salesPrice
      - numPax
      - roomInfos
      - recommended
    properties:
      id:
        type: string
      productId:
        type: string
        description: Nezasa ID which references the hotel product for this offer
      name:
        type: string
      officialRating:
        type: string
        description: The official rating of the accommodation
      location:
        $ref: '#/definitions/GeoLocation'
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for all PAX for the entire duration of their stay in this room
      serviceCategoryIds:
        type: array
        items:
          type: string
        description: IDs which reference the specific service categories for this room offer
      isOnRequest:
        type: boolean
      recommended:
        type: boolean
      amenityOffers:
        type: array
        items:
          $ref: '#/definitions/AmenityOffer'
      groupedAmenityOffers:
        type: array
        items:
          $ref: '#/definitions/GroupedAmenityOffer'
      numPax:
        type: number
        format: int32
        description: |
          The total number of PAX
      roomInfos:
        type: array
        items:
          $ref: '#/definitions/RoomInfo'
      isRefundable:
        type: boolean
        description: |
          If this attribute is not present in the response, then the backend has no information whether
          the offer will be refunded when cancelled. Otherwise, a value of true indicates that the offer is
          refundable
      paxSelection:
        type: array
        description: |
          PAX selection by service category
        items:
          $ref: '#/definitions/ServiceCategoryPaxSelection'
      source:
        type: string
        description: |
          The component source which was used when searching for the offer. This value will always
          be defined if the offer is taken from the Nezasa backend. Due to backward-compatibility reasons, we
          need to allow an optional value here, in which case, we use the default accommodation component
          source defined on the itinerary.
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      description:
        type: string
        description: |
          HTML encoded description of the accommodation.
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      facts:
        type: array
        items:
          $ref: '#/definitions/OfferFact'
        description: |
          A list of facts about the product.
      ratings:
        type: array
        items:
          $ref: '#/definitions/ProductRating'

  RoomInfo:
    type: object
    description: Returns some general information about each room in an alternaitve accommodation or AccommodationOffer
    required:
      - id
      - name
      - numPax
      - included
    properties:
      id:
        type: string
      name:
        type: string
      included:
        type: string
      numPax:
        type: number
        format: int32
      cancellationPolicy:
        type: object
        $ref: '#/definitions/ComponentCancellationPolicy'

  AmenityOffer:
    type: object
    description: |
      An amenity is an additional service and facility provided by a product. An amenity is either
      always included and thus free of additional charge, or it is an optional amenity with a price.
    required:
      - id
      - name
      - amenityType
      - includedByDefault
      - allowPerPaxMultiplier
      - salesPrice
    properties:
      id:
        type: string
        description: |
          The ID which is used to identify this amenity in the accommodation product. This ID is also
          required when sending an accommodation update request in order to know which amenities to
          add to the selected accommodation.
      name:
        type: string
      amenityType:
        type: string
        description: |
          Amenity types are extensible enums which are defined by the TourOperator when creating the
          amenity in Cockpit.
      includedByDefault:
        type: boolean
        description: |
          If true then there are no additional costs for this amenity offer. Otherwise an optional
          amenity has a cost associated with it.
      allowPerPaxMultiplier:
        type: boolean
        description: |
          If true this amenity can be applied per PAX (e.g. when selected the caller
          can specify to how many PAX it applies). Otherwise the amenity will apply to all
          PAX defined on the itinerary
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total sales price for this amenity offer if not included as part of the component.
          The price is either for all PAX or per group.
      externallyPaidCharges:
        $ref: '#/definitions/ExternallyPaidCharge'
        description: |
          Charges to be paid externally, meaning not on our platform. These are charges for
          things that we want to show the price on our platform, however, when the user makes
          the payment, we wouldn't charge for them. Instead, these charges are paid in the
          destination.
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      maxMultiplier:
        type: integer
        format: int32
        description: |
          The maximum amount of units of this amenity that can be allocated per offer.
          Usually only applies to amenities which are not booked per pax (like rental car amenities).

  GroupedAmenityOffer:
    type: object
    description: |
      A grouped amenity offer defines a set of related amenities which can be configured such that
      only a single element can be selected.
    required:
      - id
      - name
      - optOutLabel
      - singleAmenities
      - groupedAmenityType
    properties:
      id:
        type: string
        description: |
          The ID which is used to identify this amenity group in the accommodation product.
      name:
        type: string
      optOutLabel:
        type: string
      singleAmenities:
        type: array
        items:
          $ref: '#/definitions/AmenityOffer'
      groupedAmenityType:
        type: string
        enum:
          - SingleSelection
          - MandatorySingleSelection
          - MultiSelection
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'

  RoomType:
    type: object
    required:
      - max
      - min
      - salesPrice
    properties:
      roomType:
        type: string
      max:
        type: integer
        format: int32
      min:
        type: integer
        format: int32
      occupancy:
        type: integer
        format: int32
      description:
        type: string
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'

  RoomCategoryOffer:
    type: object
    required:
      - id
      - name
      - roomTypes
    properties:
      id:
        type: string
      name:
        type: string
      roomTypes:
        type: array
        items:
          $ref: '#/definitions/RoomType'

  ProductRating:
    type: object
    required:
      - source
      - rating
    properties:
      source:
        type: string
        enum:
          - TrustYou
          - Priceline
      rating:
        type: string

  ActivityInterestCategory:
    type: string
    enum: &ActivityInterestCategory
      - CityAndShopping
      - ThemeParks
      - TicketsAndSightseeingPasses
      - ArtsAndCulture
      - EntertainmentAndSportEvents
      - GastronomyAndNightlife
      - OutdoorActivitiesAndSports
      - DayTripsAndExcursions
      - NatureAndWildlife
      - SpaAndWellness
      - Transportation
      - AerialTours
      - BoatTours
      - Classes
      - ForCouples
      - ForFamilies
      - ForSeniors

  ComponentCancellationPolicy:
    type: object
    required:
      - cancellationType
      - rules
    properties:
      cancellationType:
        type: string
        enum: &CancellationType
          - Free
          - FeeApplies
          - NonRefundable
          - Unknown
      rules:
        type: array
        items:
          $ref: '#/definitions/ComponentCancellationPolicyRule'

  ComponentCancellationPolicyRule:
    type: object
    description: |
      Contains rules how a cancellation fee is to be applied.
      The rules can be based on percentage or amount but not both.
    properties:
      startDate:
        type: string
        description: |
          The starting date from which the fee will be applied. The date
          is "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDate:
        type: string
        description: |
          The ending date untill the fee will be applied. The date
          is "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      percentage:
        type: number
      amount:
        $ref: '#/definitions/MonetaryAmount'

  ServiceCategoryPaxSelection:
    type: object
    required:
      - serviceCategoryId
    properties:
      serviceCategoryId:
        type: string
      paxSelection:
        type: array
        uniqueItems: true
        description: |
          The list of PAX IDs to book this activity for (eg. pax-1, pax-2, pax-3)
        items:
          type: string

  ServiceCategoryOffer:
    type: object
    required:
      - id
      - name
      - startDate
      - salesPrice
      - pricingType
      - cancellationPolicy
    properties:
      id:
        type: string
      name:
        type: string
      startDate:
        type: string
        description: |
          The start date for this activity product. The date
          is "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total sales price for this service category offer for all PAX which is based on the
          number of PAX and the seasonal pricing convering the dates of this offer
      cancellationPolicy:
        type: object
        $ref: '#/definitions/ComponentCancellationPolicy'

  ActivityOverviewDisplay:
    type: object
    description: |
      Describes if and how an activity should be displayed in an overview scenario
    required:
      - showShortDescription
      - showSegments
      - showSegmentsExpanded
    properties:
      showShortDescription:
        type: boolean
        description: |
          If true, then the activity's short description is shown in the overview
      showSegments:
        type: boolean
        description: |
          If true, then the activity's segments are displayed.
      showSegmentsExpanded:
        type: boolean
        description: |
          If true, the activity's segments are shown expanded.

  ActivityComponent:
    type: object
    description: |
      An ActivityComponent describes either a transit or stop activity in the itinerary
    required:
      - id
      - productId
      - name
      - salesPrice
      - componentType
      - keySentence
      - externalRefs
      - overviewDisplay
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this activity
      productId:
        type: string
        description: A unique ID identifying the product within this activity component
      name:
        type: string
      componentType:
        type: string
      keySentence:
        type: string
      shortDescription:
        type: string
      groupActivityType:
        type: string
      supplier:
        type: string
      serviceCategory:
        $ref: '#/definitions/ServiceCategory'
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total sales price for this activity for all PAX which is based on the total
          sum of all service categories and amenities that are not included by default in this component
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description:
          The total net price for this activity for all PAX which is based on the total
          sum of all service categories and amenities that are not included by default in this component
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price in the supplier's currency
      startLocation:
        $ref: '#/definitions/GeoLocation'
      endLocation:
        $ref: '#/definitions/GeoLocation'
      startDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
          DEPRECATED:
          This attribute has been deprecated in favor of 'tourAttributes.categories'.
      endDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
          DEPRECATED:
          This attribute has been deprecated in favor of 'tourAttributes.categories'.
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      startTime:
        type: string
        description: A "time-hour" ":" "time-minute" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
      endTime:
        type: string
        description: A "time-hour" ":" "time-minute" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      amenities:
        type: array
        items:
          $ref: '#/definitions/Amenity'
      segments:
        type: array
        items:
          $ref: '#/definitions/ActivitySegment'
      tourAttributes:
        type: object
        $ref: '#/definitions/TourAttributes'
      infoSections:
        type: array
        items:
          $ref: '#/definitions/InfoSection'
      tags:
        type: array
        items: { type: string }
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      bookingInfo:
        $ref: '#/definitions/BookingInfo'
        description: The booking information for the component
      paxSelection:
        type: array
        description: |
          The list of PAX IDs to book this activity for (eg. pax-1, pax-2, pax-3)
        items:
          type: string
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded
      isFixed:
        type: boolean
        description: Define whether the activity is fixed or not in the itinerary
      overviewDisplay:
        $ref: '#/definitions/ActivityOverviewDisplay'
        description: Describes how the activity should be display in the overview

  OfferFact:
    type: object
    description: |
      A facts about a specific product. Ex: "outdoor_pool", "beach_pebble"
    required:
      - name
    properties:
      name:
        type: string
      id:
        type: string
        description: The GIATA id for this fact

  ServiceCategory:
    type: object
    required:
      - name
      - included
      - excluded
    properties:
      name:
        type: string
      included:
        type: string
      excluded:
        type: string

  ActivitySegment:
    type: object
    required:
      - description
      - startsOnDay
      - endsOnDay
      - segmentType
    properties:
      title:
        type: string
      startsOnDay:
        type: integer
      endsOnDay:
        type: integer
      segmentType:
        type: string
      location:
        type: string
      countryCode:
        type: string
      geoCoordinates:
        $ref: '#/definitions/GeoLocation'
      gettingThereBy:
        type: string
      description:
        type: string
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'

  Amenity:
    type: object
    required:
      - productId
      - amenityName
      - amenityType
      - amenityInclusionPolicy
      - chargeType
      - salesPrice
    properties:
      productId:
        type: string
        description: A unique ID identifying the amenity
      amenityName:
        type: string
      amenityType:
        type: string
      amenityDetails:
        type: string
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      amenityInclusionPolicy:
        type: string
      chargeType:
        type: string
        enum:
          - InNezasa
          - InDestination
      pricingPaxDimension:
        type: string
        enum:
          - PricePerPax
          - PricePerGroupOrRoom
          - Included
          - External
        description: |
          Defines the multiplier for persons and groups.
      pricingTimeDimension:
        type: string
        enum:
          - PerStay
          - PerNight
          - PerPartialDay
        description: |
          Defines the multiplier for time.
      paxMultiplier:
        type: number
        format: int32
        description: |
          This value represents the number of PAX for which this amenity applies.
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total sales price for this activity for all PAX which is based on the total
          sum of all service categories and amenities that are not included by default in this component
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price for this activity for all PAX which is based on the total
          sum of all service categories and amenities that are not included by default in this component
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price in the supplier's currency
      externallyPaidCharge:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total price to be paid in Destination

  ActivityOffer: &activityOffer
    type: object
    description: |
      An ActivityOffer is an offering for either a scheduled or unscheduled stop activity.
    required:
      - id
      - name
      - keySentence
      - startLocation
      - endLocation
      - duration
      - startDate
      - source
      - interestCategories
    properties:
      id:
        type: string
      name:
        type: string
      keySentence:
        type: string
      programs:
        type: array
        items:
          $ref: '#/definitions/ActivityProgram'
      tourAttributes:
        type: object
        $ref: '#/definitions/TourAttributes'
      infoSections:
        type: array
        items:
          $ref: '#/definitions/InfoSection'
      startLocation:
        $ref: '#/definitions/GeoLocation'
      endLocation:
        $ref: '#/definitions/GeoLocation'
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      duration:
        $ref: '#/definitions/ActivityDuration'
      amenityOffers:
        type: array
        items:
          $ref: '#/definitions/AmenityOffer'
      groupedAmenityOffers:
        type: array
        items:
          $ref: '#/definitions/GroupedAmenityOffer'
      serviceCategoryOffers:
        type: array
        items:
          $ref: '#/definitions/ServiceCategoryOffer'
      startDate:
        type: string
        description: |
          The starting date for this activity product. This value is what was originally used
          when querying for activity offers and is sent back in the response for completeness-sake. The date
          is "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      possibleStartTimes:
        type: array
        items:
          type: string
          description: |
            A possible starting time for the activity. The time is always expressed "time-hour" ":" "time-minute"
            as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6 and is local
            to the startLocation of the activity
        description: |
          A list of possible starting times for the activity. The times are local to the startLocation
          of this activity offer.
      roomCategoryOffers:
        type: array
        items:
          $ref: '#/definitions/RoomCategoryOffer'
      areaRefId:
        type: string
      source:
        type: string
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      interestCategories:
        type: array
        items:
          type: string
          enum: *ActivityInterestCategory
        description: |
          DEPRECATED:
          This attribute has been deprecated in favor of 'tourAttributes.categories'.
      characteristics:
        type: array
        items:
          type: string
        description: |
          A list of characteristics about this offer.

  TourAttributes:
    type: object
    description: |
      Structured set of attributes about a tour. Also see https://support.nezasa.com/hc/en-gb/articles/4410252659473
    required:
      - categories
    properties:
      minAge:
        type: integer
      groupActivity:
        type: string
        enum:
          - JoinIn
          - Private
      groupSizeMin:
        type: integer
      groupSizeMax:
        type: integer
      guaranteedDeparture:
        type: boolean
      difficultyLevel:
        type: number
        format: double
      guideInfo:
        $ref: '#/definitions/GuideInformation'
      categories:
        type: array
        items:
          $ref: '#/definitions/TourCategory'

  GuideInformation:
    type: object
    required:
      - languages
    properties:
      guided:
        type: boolean
      languages:
        type: array
        items:
          type: string

  TourCategory:
    type: object
    description: |
      Also see https://support.nezasa.com/hc/en-gb/articles/4410244118161 for a full list.
      The list may be extended in the future with new IDs.
    required:
      - categoryTypeRefId
      - refId
      - categoryType
      - category
    properties:
      categoryTypeRefId:
        type: integer
      refId:
        type: integer
      categoryType:
        type: string
      category:
        type: string

  InfoSection:
    type: object
    description: |
      An information section about "pickup", "facilities", "important note" or "additional information".
    required:
      - title
      - sectionType
      - htmlText
    properties:
      title:
        type: string
      sectionType:
        type: string
        enum:
          - PickupInstructions
          - ImportantRemarks
          - AdditionalInformation
          - Custom
          - Highlights
          - TravelGuide
      htmlText:
        type: string

  ActivityProgram:
    type: object
    required:
      - startDate
      - endDate
    properties:
      startDate:
        type: string
        description: |
          The starting day for the segments contained in this program. The date is
          "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDate:
        type: string
        description: |
          The end date for the list of segments contained in this program. The date is
          a "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      segmentDescriptions:
        type: array
        items:
          $ref: '#/definitions/ActivitySegmentDescription'

  ActivitySegmentDescription:
    type: object
    description: |
      A container class which holds the descriptive elements of an activity segment. Used as part of
      the activity offer structure
    required:
      - htmlText
      - segmentType
    properties:
      title:
        type: string
        description: If present this attribute is the title used by the activity segment
      htmlText:
        type: string
      segmentType:
        type: string
        enum:
          - Transfer
          - ActivityOrHighlight
          - Overnight
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'

  ActivityDuration:
    type: object
    description: Container for the duration of an activity
    required:
      - overnights
      - hours
    properties:
      overnights:
        type: number
        format: int32
      hours:
        type: number
        format: int32

  BaseServiceOffer:
    type: object
    description: |
      An offering for a base service product
    required:
      - id
      - name
      - serviceCategoryOffer
    properties:
      id:
        type: string
      name:
        type: string
      serviceCategoryOffer:
        $ref: '#/definitions/ServiceCategoryOffer'

  TransferComponent:
    type: object
    description: |
      An TransferComponent describes transfer entity in the itinerary
    required:
      - id
      - productId
      - name
      - salesPrice
      - startLocation
      - endLocation
      - startDateTime
      - endDateTime
      - componentType
      - externalRefs
      - duration
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this transfer
      productId:
        type: string
        description: A unique ID identifying the product within this transfer component
      name:
        type: string
      componentType:
        type: string
      transferType:
        type: string
      isPrivate:
        type: boolean
      supplier:
        type: string
      shortDescription:
        type: string
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total sales price for this transfer for all PAX which is based on the total
          sum of all service categories and amenities that are not included by default in this component
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price for this transfer for all PAX which is based on the total
          sum of all service categories and amenities that are not included by default in this component
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price in the supplier's currency
      startLocation:
        $ref: '#/definitions/GeoLocation'
      endLocation:
        $ref: '#/definitions/GeoLocation'
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      serviceCategory:
        $ref: '#/definitions/ServiceCategory'
      amenities:
        type: array
        items:
          $ref: '#/definitions/Amenity'
      tags:
        type: array
        items: { type: string }
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      bookingInfo:
        $ref: '#/definitions/BookingInfo'
        description: The booking information for the component
      duration:
        type: string
        description: The duration of the transfer in the ISO8601 standard format PyYmMwWdDThHmMsS. E.g. for 19 minutes and 30 seconds, "PT19M30S"
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded

  TransferOffer:
    type: object
    description: |
      The offer for a transfer product is an instance of the product for a given start date and number
      of PAX. The offer also contains the most important description fields such as the
      offers for the underlying amenities and service categories
    required:
      - id
      - productFromName
      - productToName
      - legs
      - transferType
      - isPrivate
      - shortDescription
      - serviceCategories
      - amenities
      - groupedAmenities
      - componentSource
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this rental car
      productFromName:
        type: string
        description: |
          User friendly name where the transfer starts from. Note that it is not guaranteed to
          use this name to lookup any geo information for the tranfers. This information is
          contained as part of the legs.
      productToName:
        type: string
        description: |
          User friendly name where the transfer goes to. Note that it is not guaranteed to
          use this name to lookup any geo information for the tranfers. This information is
          contained as part of the legs.
      legs:
        type: array
        items:
          $ref: '#/definitions/TransferLegOffer'
      transferType:
        type: string
        description: |
          For transfers this field will indicate what type of transfer (Road, Boat, Rail, etc)
        enum:
          - Road
          - Rail
          - Boat
          - Flight
      isPrivate:
        type: boolean
        description: Indicates whether this is a private transfer
      shortDescription:
        type: string
      serviceCategories:
        type: array
        items:
          $ref: '#/definitions/ServiceCategoryOffer'
      amenities:
        type: array
        items:
          $ref: '#/definitions/AmenityOffer'
      groupedAmenities:
        type: array
        items:
          $ref: '#/definitions/GroupedAmenityOffer'
      componentSource:
        type: string

  TransferLegOffer:
    type: object
    description: |
      The details pertaining to one leg in a transfer offer.
    required:
      - startLocation
      - endLocation
      - startDateTime
      - endDateTime
    properties:
      startLocation:
        $ref: '#/definitions/GeoLocation'
      endLocation:
        $ref: '#/definitions/GeoLocation'
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6

  RentalCarComponent:
    type: object
    description: |
      An RentalCarComponent describes a rental car used in the itinerary
    required:
      - id
      - name
      - unitSalesPrice
      - salesPrice
      - pickupLocation
      - dropoffLocation
      - pickupDateTime
      - dropoffDateTime
      - rentalDurationInDays
      - componentType
      - externalRefs
      - externallyPaidCharges
      - included
      - excluded
      - isPlaceholder
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this rental car
      name:
        type: string
      supplier:
        type: string
      supplierLogoUrl:
        type: string
      componentType:
        type: string
      additionalInformation:
        type: string
      isPlaceholder:
        type: boolean
        description: Indicates whether this is a placeholder component
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales price for the entire duration (in days) of the rental car
      unitSalesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The sales price per day of the rental car
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price for the entire duration (in days) of the rental car
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price in the supplier's currency
      pickupLocation:
        $ref: '#/definitions/GeoLocation'
      dropoffLocation:
        $ref: '#/definitions/GeoLocation'
      pickupDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      dropoffDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      rentalDurationInDays:
        type: integer
        format: int32
        description: Duration of the rental car in days
      pickupStation:
        $ref: '#/definitions/RentalStation'
        description: Defines the rental car pick-up station.
      dropoffStation:
        $ref: '#/definitions/RentalStation'
        description: Defines the rental car drop-off station.
      acrissDescription:
        $ref: '#/definitions/AcrissDescription'
      externallyPaidCharges:
        type: array
        items:
          $ref: '#/definitions/ExternallyPaidCharge'
      included:
        description: |
          Included services are things that are offered with the car without any
          extra fees. Typical examples are insurances, local taxes, whether the
          irst tank is free, etc..
        type: array
        items:
          $ref: '#/definitions/RentalCarService'
      excluded:
        description: |
          Excluded services are things that are not offered with the car and might be available as an amenity.
        type: array
        items:
          $ref: '#/definitions/RentalCarService'
      pictures:
        description: |
          The metadata for the rental car product's pictures (managed in the Inventory)
        type: array
        items:
          $ref: '#/definitions/Picture'
      thumbnailUrl:
        description: |
          The URL of the rental car thumbnail
        type: string
      tags:
        type: array
        items: { type: string }
      amenities:
        type: array
        items:
          $ref: '#/definitions/Amenity'
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      bookingInfo:
        $ref: '#/definitions/BookingInfo'
        description: The booking information for the component
      cancellationPolicy:
        $ref: '#/definitions/ComponentCancellationPolicy'
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded

  RentalCarOffer:
    type: object
    description: |
      An RentalCarOffer describes a rental car offer available to be used in an itinerary
    required:
      - id
      - name
      - pickupLocation
      - dropoffLocation
      - pickupDateTime
      - dropoffDateTime
      - pickupStation
      - dropoffStation
      - salesPrice
      - externallyPaidCharges
      - acrissDescription
      - componentSource
      - included
      - excluded
    properties:
      id:
        type: string
        description: A unique ID which identifies this rental car offer
      componentSource:
        type: string
        description: Source of the offer
      name:
        type: string
      pickupLocation:
        $ref: '#/definitions/GeoLocation'
        description: Defines a pickup location namely the place where traveller starts to rent a car.
      dropoffLocation:
        $ref: '#/definitions/GeoLocation'
        description: Defines a pickup location namely the place where traveller stops to rent a car.
      pickupDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'pickupLocation'
      dropoffDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'dropoffLocation'
      pickupStation:
        $ref: '#/definitions/RentalStation'
        description: Defines the rental car pick-up station.
      dropoffStation:
        $ref: '#/definitions/RentalStation'
        description: Defines the rental car drop-off station.
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales price for all PAX for the entire duration of rental car
      externallyPaidCharges:
        type: array
        items:
          $ref: '#/definitions/ExternallyPaidCharge'
      included:
        description: |
          Included services are things that are offered with the car without any
          extra fees. Typical examples are insurances, local taxes, whether the
          irst tank is free, etc..
        type: array
        items:
          $ref: '#/definitions/RentalCarService'
      excluded:
        description: |
          Excluded services are things that are not offered with the car and might be available as an amenity.
        type: array
        items:
          $ref: '#/definitions/RentalCarService'
      acrissDescription:
        $ref: '#/definitions/AcrissDescription'
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      maxNumberOfAmenities:
        type: integer
        description: |
          If defined, it contains the maximum number of amenities that can be selected with this rental car.
      amenityOffers:
        type: array
        items:
          $ref: '#/definitions/AmenityOffer'
      packageName:
        type: string
        description: |
          If defined, it contains the supplier package that is associated with the offer.
      supplierLogoUrl:
        type: string
        description: |
          If defined, it contains the URL to the supplier logo that is associated with the offer.
      additionalInformation:
        type: string
        description: |
          If defined, it contains additional information that is associated with the offer. For
          most suppliers this will be the Terms and Conditions, but the caller will need to check
          the `componentSource` to determine the actual content.

          The content is returned as returned by the supplier and is not processed by Nezasa. It is
          up to the caller to decide how to display this information.

  RentalStation:
    type: object
    required:
      - meetingType
      - openingHours
      - address
    properties:
      meetingType:
        type: string
        enum:
          - DeskAtAirport
          - ShuttleService
          - RepresentantService
          - CityOffice
          - HarbourStation
          - RailwayStation
          - Unknown
      openingHours:
        type: array
        items:
          $ref: '#/definitions/RentalStationOpeningHour'
      address:
        $ref: '#/definitions/RentalStationAddress'
      coordinates:
        $ref: '#/definitions/Coordinates'
      id:
        type: integer
        format: int64

  RentalStationOpeningHour:
    type: object
    required:
      - day
      - status
      - from
      - to
    properties:
      day:
        type: array
        items:
          type: string
          enum:
            - Mon
            - Tue
            - Wed
            - Thu
            - Fri
            - Sat
            - Sun
      status:
        type: string
        enum:
          - Open
          - OnRequest
          - Unknown
      from:
        type: string
        format: 'partial-time'
        description: |
          As "time-hour" ":" "time-minute" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
        example: '00:00'
      to:
        type: string
        format: 'partial-time'
        description: |
          As "time-hour" ":" "time-minute" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
        example: '23:59'

  RentalStationAddress:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
      zipCode:
        type: string
      city:
        type: string
      country:
        type: string

  RentalCarPuDoAlternative:
    type: object
    description: |
      The structure represents an alternative location which can be used when searching
      for rental car offers. This alternative location is returned to the caller when
      querying for possible PuDo (Pick-Up, Drop-Off) locations to use for querying.
    required:
      - id
      - name
      - coordinates
      - minDate
      - maxDate
      - minTime
      - maxTime
    properties:
      id:
        type: string
        description: |
          Internal id which identifies the location in the itinerary. These ids are subject to
          change and should not be interpreted in any way by the client, however, for documentation
          completeness, the current set of ids is decribed here.

          - TemplateStart:  This indicates that the alternative should start or end at the start of
                            the itinerary. This id is normally only used for pick-ups since dropping
                            off a rental car before the trip has started does not make sense.

          - TemplateEnd: Similar to the "TemplateStart" this indicates the the alternative is at the
                         end of the itinerary. This is normally used for drop-off locations.

          - Stop:<local-id>: The alternative location points to an internal stop in the itinerary.
                             The <local-id> is a unique ID which identifies the stop and should not
                              be interpreted in any way by the client

          - Connection:<local-id>: The alternative location points inside a connection. This use case
                                   is for specifying rental car locations within a transit activity.
        example: TemplateStart
      name:
        type: string
        description: |
          User friendly name of the location
        example: Rome (FCO)
      coordinates:
        $ref: '#/definitions/Coordinates'
      iataCode:
        type: string
        description: |
          An optional value that, if specified, is the 3-LC for the airport's IATA code.
        example: 'FCO'
      minDate:
        type: string
        format: date
        description: |
          The earliest date for the pick-up or drop-off. This value must correspond to a "full-date"
          as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
        example: '2021-04-17'
      maxDate:
        type: string
        format: date
        description: |
          The latest date for the pick-up or drop-off. This value must correspond to a "full-date"
          as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
        example: '2021-04-17'
      minTime:
        type: string
        format: partial-time
        description: |
          The earliest time for either the pick-up or drop-off. This value is formatted
          as "time-hour" ":" "time-minute" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
        example: '00:00'
      maxTime:
        type: string
        format: partial-time
        description: |
          The latester time for either the pick-up or drop-off. This value is formatted
          as "time-hour" ":" "time-minute" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
        example: '23:59'
    example:
      - id: 'Stop:5ee71b4901000054a7ec41be'
        name: 'Rome'
        coordinates:
          lat: 41.8999192
          lon: 12.4833516
        locationType: 'Area'
        minDate: '2021-04-17'
        maxDate: '2021-04-17'
        minTime: '00:00'
        maxTime: '23:59'
      - id: 'TemplateEnd'
        name: 'Amsterdam (AMS)'
        iataCode: 'AMS'
        coordinates:
          lat: 52.308613
          lon: 4.763889
        locationType: 'Airport'
        minDate: '2021-04-25'
        maxDate: '2021-04-25'
        minTime: '00:00'
        maxTime: '23:59'

  RentalCarPuDoAlternativesResponse:
    type: object
    description: |
      The response object returned when querying for the list of PuDO (Pick-Up, Drop-Off)
      alternative locations which are valid for offer searching.
    required:
      - pickups
      - dropoffs
      - currentPickupIndex
      - currentDropoffIndex
    properties:
      pickups:
        type: array
        items:
          $ref: '#/definitions/RentalCarPuDoAlternative'
        description: |
          The list of possible pick-up locations which can be selected when searching
          for rental car offers.
      dropoffs:
        type: array
        items:
          $ref: '#/definitions/RentalCarPuDoAlternative'
        description: |
          The list of possible drop-off locations which can be selected when searching
          for rental car offers.
      currentPickupIndex:
        type: integer
        description: |
          The index into 'pickups' array indicating the currently selected pick-up
          location for the selected rental car
        example: 0
      currentDropoffIndex:
        type: integer
        description: |
          The index into 'dropoffs' array indicating the currently selected drop-off
          location for the selected rental car
        example: 14

  RentalCarSearchOffersRequest:
    type: object
    description: |
      The request object sent by the caller when searching for rental car offers
    properties:
      driverAge:
        type: integer
        description: |
          Driver age at the day the car is being picked up. This is only required if the age is
          outside the standard 25-69 years.
      driverCountryCodeOfResidence:
        type: string
        format: iso-3166-1 alpha-2
        description: |
          2-letter ISO country code (e.g. CH) defining the residency country of the driver.
          This is an optional parameter, but depending on the underlying suppliers, the information might
          be required currently. E.g., for Carnect. In the future, the backend will try to derive the
          informtion from the IP address and other information.
      alternativePickup:
        $ref: '#/definitions/RentalCarSearchOffersRequestPuDoAlternative'
        description: |
          The alternative time and location to use as pick-up.
          If no alternative pick-up is provided, then the server will use the pick-up time and location of the currently
          referenced rental car identified by `rentalCarId` which is part of the offer search request URL.
      alternativeDropoff:
        $ref: '#/definitions/RentalCarSearchOffersRequestPuDoAlternative'
        description: |
          The alternative time and location to use as drop-off.
          If no alternative drop-off is provided, then the server will use the drop-off time and location of the currently
          referenced rental car identified by `rentalCarId` which is part of the offer search request URL.
      pickupRadius:
        type: number
        format: double
        description: |
          The search radius in meter to be used. The center is the pick-up location.
          Defaults to 3000m when the pick-up location is an Airport, otherwise we use the
          radius defined on the Area for searching for nearby hotels. This Area value can be
          configured for custom areas in Cockpit.
      dropoffRadius:
        type: number
        format: double
        description: |
          The search radius in meter to be used. The center is the drop-off location.
          Defaults to 3000m when the pick-up location is an Airport, otherwise we use the
          radius defined on the Area for searching for nearby hotels. This Area value can be
          configured for custom areas in Cockpit.

  RentalCarSearchOffersRequestPuDoAlternative:
    type: object
    description: |
      The request object containing an alternative location, date and time for the pick-up/drop-off
      when searching for rental car offers.
    required:
      - id
      - date
      - time
    properties:
      id:
        type: string
        description: |
          The id of the alternative PuDo location to use. This value is the id of one of the
          `RentalCarPuDoAlternative` returned in the `RentalCarPuDoAlternativesResponse`
      date:
        type: string
        format: date
        description: |
          The pick-up/drop-off date as "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
      time:
        type: string
        format: partial-time
        description: |
          The pick-up/drop-off time as "time-hour" ":" "time-minute" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.

  RentalCarService:
    type: object
    description: |
      Rental Car services are things that can be added to an offer.
      Typical examples are insurances, local taxes, whether the
      first tank is free, etc..
    required:
      - name
      - category
    properties:
      name:
        type: string
      category:
        type: string
        enum:
          - Charges
          - Default
          - Extras
          - Insurance
          - Fuel
          - Unknown

  AcrissDescription:
    type: object
    description: |
      Rental cars are classified according to version 8 of the ACRISS car classification codes. See
      https://acriss.igloocommunities.com/download/knowledge/files/kb_files/forms/2018/vehicle_guide_english_2018_julypdf;v1?attachment=1 for further details.
    required:
      - code
      - category
      - carType
      - transmission
      - fuelAC
      - passengers
      - suitcases
    properties:
      code:
        type: string
        description: 4-letter ACRISS code defining the rental car's classification.
      category:
        type: string
        description: 1-letter car category code as defined by ACRISS code
      carType:
        type: string
        description: 1-letter car type code as defined by ACRISS code.
      transmission:
        type: string
        description: 1-letter car transmission code as defined by ACRISS code
      fuelAC:
        type: string
        description: 1-letter car fuel/air conditioning code as defined by ACRISS code
      passengers:
        type: number
        format: int32
      suitcases:
        type: number
        format: int32

  FlightDirection:
    type: string
    description: |
      Indicates whether this leg is an outbound or inbound leg. The outbound leg is one which is leaving
      the PAX origin heading towards the destination, whereas the inbound will be one of the legs
      heading back to the origin. However, due to complex routing rules, the concept of 'outbound' and 'inbound'
      may not always correlate with what the PAX considers outbound and inbound.
    enum: &FlightDirection
      - Inbound
      - Outbound

  FlightClass:
    type: string
    enum: &FlightClass
      - Economy
      - PremiumEconomy
      - BusinessClass
      - FirstClass

  FlightComponent:
    type: object
    description: |
      An FlightComponent describes an international flight component used in the itinerary
    required:
      - id
      - salesPrice
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this flight component
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for all PAX (adults and children)
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net prices for all PAX (adults and children)
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price in the supplier's currency
      pnrId:
        type: string
        description: PNR locator, only ID, no PNR content
      legs:
        type: array
        items:
          $ref: '#/definitions/FlightComponentLeg'
        description: |
          The list of flight legs describing the entire flight itinerary
      bookingInfo:
        $ref: '#/definitions/BookingInfo'
        description: The booking information for the component

  FlightComponentLeg:
    type: object
    description: |
      A FlightComponentLeg describes one leg in a flight itinerary (e.g. a Frankfurt to New Delhi)
    required:
      - direction
      - segments
    properties:
      direction:
        type: string
        enum: *FlightDirection
      segments:
        type: array
        items:
          $ref: '#/definitions/FlightComponentAirSegment'
        description: |
          A FlightComponentLeg can be composed of several air segments, each with their own departure and arrival
          airports and time.

  FlightComponentAirSegment:
    type: object
    description: |
      A FlightComponentAirSegment describes one air segment in a flight leg. For example, for the flight leg Frankfurt to
      New Delhi, a flight segment could be the section of the leg from Frankfurt to Heathrow, whereas another
      segment would be Heathrow to New Delhi.
    required:
      - departureLocation
      - departureDateTime
      - arrivalLocation
      - arrivalDateTime
      - flightClass
    properties:
      departureLocation:
        type: string
        description: |
          For airports this will contain the 3-letter IATA code assigned to it. For other types of
          locations (e.g. Areas) it will contain the area's name
      departureDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'departureLocation'
      arrivalLocation:
        type: string
        description: |
          For airports this will contain the 3-letter IATA code assigned to it. For other types of
          locations (e.g. Areas) it will contain the area's name
      arrivalDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'arrivalLocation'
      flightClass:
        type: string
        enum: *FlightClass
      airline:
        type: string
        description: Name of marketing airline
      airlineCode:
        type: string
        description: 2-letter IATA code for the marketing airline (e.g. LH)
      airlineFlightNumber:
        type: string
        description: If present, this is the flight number for the marketing airline
      operatingAirline:
        type: string
        description: Name of the operating airline
      operatingAirlineCode:
        type: string
        description: 2-letter IATA code for the operating airline (e.g. LH)
      operatingFlightNumber:
        type: string
        description: If present, this is the flight number for the operating airline

  FlightOffer:
    type: object
    description: |
      A FlightOffer describes a SoftConEx flight fare
    required:
      - id
      - legs
      - numPax
      - paxPrices
      - salesPrice
      - isTourOperatorOffer
    properties:
      id:
        type: string
      paxPrices:
        type: array
        items:
          $ref: '#/definitions/PassengerPrice'
        description: |
          A break down of the pricing per passenger tyupe. There is at most 1 passenger price for each
          passenger type (e.g. Adult) supported in the backend
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for all PAX (adults and children)
      numPax:
        type: number
        format: int32
        description: |
          The total number of PAX (adults and children)
      isTourOperatorOffer:
        type: boolean
        description: true if this offer is a TourOperator fare
      legs:
        type: array
        items:
          $ref: '#/definitions/FlightOfferLeg'
        description: |
          The list of flight legs describing the entire flight itinerary

  PassengerPrice:
    type: object
    required:
      - paxType
      - unitSalesPrice
      - numPax
    properties:
      paxType:
        type: string
        enum:
          - Adult
          - Child
          - Infant
      unitSalesPrice:
        $ref: '#/definitions/MonetaryAmount'
      numPax:
        type: number
        format: int32
        description: The number of PAX represented by this passenger price

  FlightOfferLeg:
    type: object
    description: |
      A FlightOfferLeg describes one leg in a flight itinerary (e.g. a Frankfurt to New Delhi)
    required:
      - id
      - direction
      - segments
    properties:
      id:
        type: string
      direction:
        type: string
        enum: *FlightDirection
      segments:
        type: array
        items:
          $ref: '#/definitions/FlightOfferAirSegment'
        description: |
          A FlightOfferLeg can be composed of several air segments, each with their own departure and arrival
          airports and time.

  FlightOfferAirSegment:
    type: object
    description: |
      A FlightOfferAirSegment describes one air segment in a flight leg. For example, for the flight leg Frankfurt to
      New Delhi, a flight segment could be the section of the leg from Frankfurt to Heathrow, whereas another
      segment would be Heathrow to New Delhi.
    required:
      - departureLocation
      - departureDateTime
      - arrivalLocation
      - arrivalDateTime
      - flightClass
      - airline
      - airlineCode
      - operatingAirline
      - operatingAirlineCode
    properties:
      departureLocation:
        $ref: '#/definitions/FlightOfferAirSegmentAirport'
      departureDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'departureLocation'
      arrivalLocation:
        $ref: '#/definitions/FlightOfferAirSegmentAirport'
      arrivalDateTime:
        type: string
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'arrivalLocation'
      flightClass:
        type: string
        enum: *FlightClass
      airline:
        type: string
        description: Name of marketing airline
      airlineCode:
        type: string
        description: 2-letter IATA code for the marketing airline (e.g. LH)
      airlineFlightNumber:
        type: string
        description: If present, this is the flight number for the marketing airline
      operatingAirline:
        type: string
        description: Name of the operating airline
      operatingAirlineCode:
        type: string
        description: 2-letter IATA code for the operating airline (e.g. LH)
      operatingFlightNumber:
        type: string
        description: If present, this is the flight number for the operating airline

  FlightOfferAirSegmentAirport:
    type: object
    description: |
      Small container class holding information for a specific airport in a flight offer
    required:
      - id
      - name
      - city
      - countryCode
      - timeZoneId
    properties:
      id:
        type: string
        description: 3-letter IATA code
      name:
        type: string
        description: Airport name localized to the caller's language
      city:
        type: string
        description: Airport city localized to the caller's language
      countryCode:
        type: string
        format: iso-3166-1 alpha-2
        description: 2-letter ISO country code (e.g. CH)
      timeZoneId: *Timezone

  GenericAdHocComponent:
    type: object
    description: |
      A generic ad-hoc component used in the itinerary
    required:
      - id
      - name
      - salesPrice
      - description
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this generic ad-hoc component
      name:
        type: string
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales price of this generic ad-hoc component
      description:
        type: string
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price  of this generic ad-hoc component
      supplier:
        type: string
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      state:
        type: string
        enum:
          - Open
          - OnRequest
          - Booked
          - NonBookable
          - Cancelled
          - None
        description: 'state of the booking'
      instantiationDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded

  TransportAdHocComponent:
    type: object
    description: |
      A transport ad-hoc component used in the itinerary
    required:
      - id
      - segments
      - salesPrice
      - startDateTime
      - endDateTime
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this generic ad-hoc component
      segments:
        type: array
        items:
          $ref: '#/definitions/TransportSegment'
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales price of this generic ad-hoc component
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price  of this generic ad-hoc component
      surcharge:
        $ref: '#/definitions/SurchargeOrTax'
        description: |
          The total surcharge price  of this generic ad-hoc component
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      transportConnectionType:
        type: string
        description: Type of the connection
        enum: *TransportConnectionType
      pnrLocator:
        type: string
        description: |
          Also called the file key, it uniquely identifies the PNR in a specific
          reservation system
      transportType:
        type: string
        description: |
          A connection can be composed of multiple segments using different means of transportation. This field just represents a "global" type of
          transport for the connection
        enum: *TransportType
      startLocation:
        $ref: '#/definitions/TransportLocation'
      endLocation:
        $ref: '#/definitions/TransportLocation'
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded
      ticketTimeLimit:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      state:
        type: string
        enum:
          - Open
          - OnRequest
          - Booked
          - NonBookable
          - Cancelled
          - None
        description: 'state of the booking'

  AccommodationAdHocComponent:
    type: object
    description: |
      An AccommodationAdHocComponent describes an adhoc accommodation in the itinerary.
    required:
      - id
      - name
      - nights
      - salesPrice
      - startDate
      - rooms
      - isOnRequest
      - nonBookable
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this accommodation view
      name:
        type: string
        description: |
          Name of the ad-hoc accommodation component
      description:
        type: string
        description: |
          Description of the ad-hoc accommodation component
      nights:
        type: integer
        format: int32
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for all PAX for the entire duration of their stay in this room
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net prices for all PAX for the entire duration of their stay in this room
      location:
        $ref: '#/definitions/GeoLocation'
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      supplier:
        type: string
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      isOnRequest:
        type: boolean
      rooms:
        type: array
        items:
          $ref: '#/definitions/AccommodationAdHocRoom'
      nonBookable:
        type: boolean
        description: A non bookable accommodation is a component that was previously added to an itinerary but is not available anymore.
      officialRating:
        type: string
        description: The official rating of the accommodation
      bookingStatus:
        type: string
        enum: *BookingStatus
        description: |
          The state of the booking

  SimpleTransportComponent:
    type: object
    description: |
      A transport ad-hoc component used in the itinerary
    required:
      - id
      - segments
      - salesPrice
      - startDateTime
      - endDateTime
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this generic ad-hoc component
      segments:
        type: array
        items:
          $ref: '#/definitions/TransportSegment'
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales price of this generic ad-hoc component
      unitSalesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The price per pax of this generic ad-hoc component
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price  of this generic ad-hoc component
      surcharge:
        $ref: '#/definitions/SurchargeOrTax'
        description: |
          The total surcharge price  of this generic ad-hoc component
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      transportConnectionType:
        type: string
        description: Type of the connection
        enum: *TransportConnectionType
      pnrLocator:
        type: string
        description: |
          Also called the file key, it uniquely identifies the PNR in a specific
          reservation system
      transportType:
        type: string
        description: |
          A connection can be composed of multiple segments using different means of transportation. This field just represents a "global" type of
          transport for the connection
        enum: *TransportType
      startLocation:
        $ref: '#/definitions/TransportLocation'
      endLocation:
        $ref: '#/definitions/TransportLocation'
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded
      hasHoldBaggage:
        type: boolean
        description: Defines whether or not the transport component has hold baggage.

  TransportSegment:
    type: object
    description: |
      A transport component segment
    required:
      - transportType
      - transportClass
      - startLocation
      - endLocation
      - startDateTime
      - endDateTime
    properties:
      transportType:
        type: string
        enum: *TransportType
      transportClass:
        type: string
        enum:
          - First
          - Second
          - Business
          - Economy
          - PremiumEconomy
      carrierCode:
        type: string
        description: |
          The carrier code for this segment, e.g. "EK" in flight "EK 448"
      carrier:
        type: string
        description: |
          The carrier name. This is the full name of the carrier, e.g. "Emirates" in flight "EK 448"
      operatingCarrier:
        type: string
        description: Name of the operating carrier of the segment
      operatingCarrierCode:
        type: string
        description: 2 letters code of the operating carrier of the segment
      transportNumber:
        type: string
        description: |
          The transport number for this segment, e.g. "448" in flight "EK 448"
      equipment:
        type: string
        description: Equipement used during the segment (type of plane, type of bus, ...)
      startLocation:
        $ref: '#/definitions/TransportLocation'
      endLocation:
        $ref: '#/definitions/TransportLocation'
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6

  ActivityAdHocComponent:
    type: object
    description: |
      An activity ad-hoc component used in the itinerary
    required:
      - id
      - name
      - salesPrice
      - description
      - locationRefId
      - startLocationRefId
      - endLocationRefId
      - startDateTime
      - endDateTime
      - activityType
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this generic ad-hoc component
      name:
        type: string
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales price of this generic ad-hoc component
      description:
        type: string
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net price  of this generic ad-hoc component
      supplier:
        type: string
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      locationRefId:
        type: string
        description: |
          The refId of the location of this ad-hoc activity component.
          Replaced by startLocationRefId and endLocationRefId but kept for backwards compatibility.
      startLocationRefId:
        type: string
        description: |
          The refId of the start location of this ad-hoc activity component.
      endLocationRefId:
        type: string
        description: |
          The refId of the end location of this ad-hoc activity component.
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      state:
        type: string
        enum:
          - Open
          - OnRequest
          - Booked
          - NonBookable
          - Cancelled
          - None
        description: 'state of the booking'
      instantiationDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded
      activityType:
        type: string
        enum: *AdhocActivityType

  ActivityAdHocComponentImportTitle:
    type: object
    description: |
      An short summary of activity ad-hoc component to import
    required:
      - bookingId
      - componentId
      - title
    properties:
      bookingId:
        type: string
        description: The unique ID identifying the booking in the external system.
      componentId:
        type: string
        description: The unique ID identifying the activity within the booking.
      title:
        type: string
        description: A title (name) of the activity allowing for identifying the activity among others.

  ActivityAdHocComponentImportDetails:
    type: object
    description: |
      The information received from the activity import containing most of the required data to insert or update
      an activity. The message contains only the pertinent information required to create the desired activity component, but some of it may require correction
      by the user before the activity can be created.

      The information sent here can be found as part of the ActivityOffer.
    required:
      - name
      - description
      - startDateTime
      - endDateTime
      - netPrice
      - salesPrice
    properties:
      name:
        type: string
        description: |
          Name of the ad-hoc activity component
      supplier:
        type: string
        description: |
          ID/name of the component supplier
      supplierConfirmationNumber:
        type: string
        description: |
          The confirmation number on the supplier
      description:
        type: string
        description: |
          Description of the ad-hoc generic component
      legId:
        type: string
        description: |
          The ID of the leg of this ad-hoc activity component
      startLocationRefId:
        type: string
        description: |
          The refId of the start location of this ad-hoc activity component
      endLocationRefId:
        type: string
        description: |
          The refId of the end location of this ad-hoc activity component
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The net price set for the ad-hoc generic component
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The sales price set for the ad-hoc generic component
      bookingStatus:
        type: string
        enum: *BookingStatus
        description: The state of the booking
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'

  RentalCarAdHocComponentImportTitle:
    type: object
    description: |
      An short summary of rentalCar ad-hoc component to import
    required:
      - bookingId
      - componentId
      - title
    properties:
      bookingId:
        type: string
        description: The unique ID identifying the booking in the external system.
      componentId:
        type: string
        description: The unique ID identifying the rentalCar within the booking.
      title:
        type: string
        description: A title (name) of the rentalCar allowing for identifying the rentalCar among others.

  # This is supposed to be an ADT like com.nezasa.model.comp.SupplierRefCO, each property being a projection...
  SupplierRef:
    type: object
    description:
      A supplier reference is defined by just one of either `refId`, `contact`, `contactRefId`, or `name`.
      If multiple are defined, only one will be considered and the others are ignored.
    properties:
      refId:
        type: string
      contactRefId:
        type: string
      name:
        type: string

  RentalCarAdHocComponentValue:
    type: object
    description: Complete representation of a rental car ad-hoc component. |
      Same as `RentalCarAdHocComponentEntity` but without an `id`.
    required:
      - name
      - pickupDateTime
      - dropoffDateTime
      - pickupLocation
      - dropoffLocation
      - included
      - excluded
      - netPrice
      - salesPrice
      - bookingStatus
      - acrissCode
      - passengers
      - suitcases
    properties:
      name:
        type: string
      additionalInfo:
        type: string
      pickupDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      dropoffDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      pickupLocation:
        $ref: '#/definitions/GeoLocation'
        description: Defines a pickup location namely the place where traveller starts to rent a car.
      dropoffLocation:
        $ref: '#/definitions/GeoLocation'
        description: Defines a pickup location namely the place where traveller stops to rent a car.
      included:
        type: array
        items:
          type: string
      excluded:
        type: array
        items:
          type: string
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total price of the rental car *excluding* sales margins. |
          This is the supplier's price, in supplier's currency.
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total price of the rental car including sales margins. |
      supplierRef:
        description:
          A supplier reference is defined by just one of either `refId`, `contact`, `contactRefId`, or `name`.
          If multiple are defined, only one will be considered and the others are ignored.
        $ref: '#/definitions/SupplierRef'
      supplier:
        type: string
      supplierConfirmationNumber:
        type: string
      bookingStatus:
        type: string
        enum: *BookingStatus
      picture:
        $ref: '#/definitions/Picture'
      acrissCode:
        type: string
        description: 4-letter ACRISS code defining the rental car's classification.
      passengers:
        type: integer
        description: Number of passengers.
      suitcases:
        type: integer
        description: Number of suitcases.

  RentalCarAdHocComponentEntity:
    type: object
    description:
      A rental car ad-hoc component with an id that uniquely distinguishes it within the itinerary. |
      Same as `RentalCarAdHocComponentValue` but with an `id`.
    required:
      - id
      - name
      - pickupDateTime
      - dropoffDateTime
      - pickupLocation
      - dropoffLocation
      - included
      - excluded
      - netPrice
      - salesPrice
      - bookingStatus
      - acrissCode
      - passengers
      - suitcases
    properties:
      id:
        type: string
      name:
        type: string
      additionalInfo:
        type: string
      pickupDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      dropoffDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      pickupLocation:
        $ref: '#/definitions/GeoLocation'
        description: Defines a pickup location namely the place where traveller starts to rent a car.
      dropoffLocation:
        $ref: '#/definitions/GeoLocation'
        description: Defines a pickup location namely the place where traveller stops to rent a car.
      included:
        type: array
        items:
          type: string
      excluded:
        type: array
        items:
          type: string
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total price of the rental car *excluding* sales margins. |
          This is the supplier's price, in supplier's currency.
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total price of the rental car including sales margins. |
      supplierRef:
        description:
          A supplier reference is defined by just one of either `refId`, `contact`, `contactRefId`, or `name`.
          If multiple are defined, only one will be considered and the others are ignored.
        $ref: '#/definitions/SupplierRef'
      supplier:
        type: string
      supplierConfirmationNumber:
        type: string
      bookingStatus:
        type: string
        enum: *BookingStatus
      picture:
        $ref: '#/definitions/Picture'
      acrissCode:
        type: string
        description: 4-letter ACRISS code defining the rental car's classification.
      passengers:
        type: integer
        description: Number of passengers.
      suitcases:
        type: integer
        description: Number of suitcases.

  BaseServiceComponent:
    type: object
    description: |
      A BaseServiceComponent describes a base service used in the itinerary
    required:
      - id
      - name
      - salesPrice
      - baseServiceType
      - externalRefs
      - coveredStops
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this base service
      name:
        type: string
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for the entire duration (in days) of this base service
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total net prices for the entire duration (in days) of this base service
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price in the supplier's currency
      supplier:
        type: string
      baseServiceType:
        type: string
      standardDurationInDays:
        type: integer
        description: deprecated, use standardDuration. for base services with hourly pricing, this value is only an approximation!
      standardDuration:
        type: integer
        description: duration in the unit designated by the rateType of the referenced product
      rateType:
        type: string
        description: the pricing unit, can be DailyRate, HourlyRate or FixedRate
      included:
        type: array
        items:
          type: string
      excluded:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          type: string
      externalRefs:
        type: array
        items:
          $ref: '#/definitions/ExternalReference'
      bookingInfo:
        $ref: '#/definitions/BookingInfo'
        description: The booking information for the component
      coveredStops:
        type: array
        items:
          $ref: '#/definitions/BaseServiceComponentLeg'
      isOnRequest:
        type: boolean
        description: Defines whether or not users are allowed to request bookings even if an allotment is exceeded

  BaseServiceComponentLeg:
    type: object
    description: |
      A BaseServiceComponent describes a base service used in the itinerary
    required:
      - legId
      - stopAreaId
      - stopAreaName
      - stopIndex
    properties:
      legId:
        type: string
      stopAreaId:
        type: string
      stopAreaName:
        type: string
      stopIndex:
        type: integer
        description: the stop index relative to its module

  RoutePoint:
    type: object
    description: |
      Describes a location in the route builder.
    required:
      - location
      - isMutable
    properties:
      location:
        $ref: '#/definitions/Location'
      isMutable:
        type: boolean
        description: if true then this location can be edited (i.e. a new area or airport can be set).

  RouteIncomingConnection:
    type: object
    description: |
      An entity which connects two coordinates/locations

      A connection is not limited to connecting two stops but any two locations. For example,
      the following connection chain would bring the PAX from New York stop to the Boston
      stop via Providence.

      [New York] >>> Bus >>> (Providence) >>> Train >>> [Boston]

      In this example, the first route incoming connection would have its start location set
      to New York, its end location set to Providence, and its transfer type defined to Bus.
      Simiarly the second incoming connection has its start and end locations set to
      Providence and Boston resp. and its transfer type set to Train.
    required:
      - startLocation
      - endLocation
      - transportMeans
    properties:
      startLocation:
        $ref: '#/definitions/Location'
      endLocation:
        $ref: '#/definitions/Location'
      transportMeans:
        type: string
        enum: *TransportMeans
        description: |
          The means by which the PAX is transported between the start and end locations.
      durationInSeconds:
        type: integer
        format: int32
        description: |
          Duration of connection in seconds.
      isMutable:
        type: boolean
        description: |
          if true then it indicates that the "connection" can be modified. This means that we can exchange the `transportMeans`
          as well as add stops before this route point since adding a stop would in essence change the incoming connection
          (i.e. the connection would be modified to go from B to C instead of A to C)

          This value is only defined when retrieving information from the backend. As part of the update
          requests any value set here is ignored.
      nights:
        type: integer
        format: int32
        description: Duration of transfer in nights.
      productName:
        type: string
        description: |
          Optional name to be displayed when the connection is fulfilled by a product (currently only for activity products)

  RouteEndLocation:
    type: object
    description: |
      Describes start and end locations for use in the route builder.
    required:
      - routePoint
      - incomingConnections
    properties:
      routePoint:
        $ref: '#/definitions/RoutePoint'
      incomingConnections:
        type: array
        items:
          $ref: '#/definitions/RouteIncomingConnection'
        description: |
          A connection chain which brings the PAX from the previous route point to this end location.

  RouteStop:
    type: object
    description: |
      Describes route item utilized by the route builder to display stop information.
    required:
      - legId
      - nights
      - routePoint
      - incomingConnections
    properties:
      legId:
        type: string
      nights:
        type: integer
        format: int32
      routePoint:
        $ref: '#/definitions/RoutePoint'
      incomingConnections:
        type: array
        items:
          $ref: '#/definitions/RouteIncomingConnection'
        description: |
          A connection chain which brings the PAX from the previous route stop (or module start location)
          to this route point.

  RouteUpdateEndLocation:
    type: object
    properties:
      location:
        $ref: '#/definitions/Location'
      incomingConnections:
        type: array
        items:
          $ref: '#/definitions/RouteIncomingConnection'
        description: |
          The chain of connections leading from the last stop in the module, or in the case of no
          stops from the module's start location, to the end location.

  RouteUpdateStop:
    type: object
    properties:
      legId:
        type: string
        description: |
          If specified, this will refer to an existing leg. This value is returned by
          the backend as part of a RouteStop. Note that only `legId` or `location`
          can be specified and the 'legId' will take priority.
      location:
        $ref: '#/definitions/Location'
        description: |
          If specified, this refers to a new stop which was added by the caller. Note that
          only `legId` or `location` can be specified and the `legId` will take priority
      nights:
        type: integer
        format: int32
      incomingConnections:
        type: array
        items:
          $ref: '#/definitions/RouteIncomingConnection'
        description: |
          The chain of connections leading from the previous stop or the module's start location
          to this route stop.

  Area:
    type: object
    description: |
      A view over the Area model which describes a set of coordinates contained within administrative borders.
    required:
      - id
      - name
      - coordinates
    properties:
      id:
        type: string
      name:
        type: string
      coordinates:
        $ref: '#/definitions/Coordinates'

  StopLocation:
    type: object
    description: |
      A specialized type of location which serves as the location for a Stop
    required:
      - id
      - name
      - coordinates
      - locationType
      - timezone
    properties:
      id:
        type: string
      name:
        type: string
      countryCode:
        type: string
      coordinates:
        $ref: '#/definitions/Coordinates'
      locationType:
        type: string
        enum:
          - Area
          - Airport
      timezone: *Timezone
      supplier: *AreaOrAreaDescriptionSupplier

  AreaDescription:
    type: object
    description: |
      A view over the AreaDescription model which describes an area (textual descriptions and pictures).
    required:
      - id
      - keySentence
    properties:
      id:
        type: string
        description: A unique ID which identifies the area description
      keySentence:
        type: string
        description: A key sentence describing the area description
      shortDescription:
        type: string
        description: Short description of the area
      pictures:
        type: array
        items:
          $ref: '#/definitions/Picture'
      supplier: *AreaOrAreaDescriptionSupplier

  Connection:
    type: object
    description: |
      A Connection is a schedulable entity describing how the traveler goes from the start to the end location.
      For example, a transfer connection can refer to a Road, Boat, or Flight transfer and is scheduled
      as part of the itinerary planning process. The actual Transfer entity which is purchased by the PAX is
      the transfer component, which is contained as part of the connection.
    required:
      - id
      - name
      - connectionType
      - startLocation
      - endLocation
      - startDateTime
      - endDateTime
    properties:
      id:
        type: string
        description: A unique ID (within the Itinerary) which identifies this connection object
      connectionLocalId:
        type: string
        description: A unique ID which identifies this component
      startLocation:
        $ref: '#/definitions/GeoLocation'
      endLocation:
        $ref: '#/definitions/GeoLocation'
      startDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      name:
        type: string
      connectionType:
        type: string
        enum:
          - Activity
          - Flight
          - RentalCar
          - Transfer
      transferType:
        type: string
        description: |
          For transfers this field will indicate what type of transfer (Road, Boat, Rail, etc)
        enum:
          - Road
          - Rail
          - Boat
          - Flight
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The sales price for this Connection
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The net price for this Connection
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price in the supplier's currency
      surcharges:
        type: array
        description: |
          List of surcharges and types incurred for this offer
        items:
          $ref: '#/definitions/SurchargeOrTax'
      distance:
        type: integer
        format: int32
        description: Distance of the rental car connection in KMs
      isPlaceholder:
        type: boolean
        description: Indicates whether this is a placeholder component

  Location:
    type: object
    description: |
      Reference to a location. The location ID is specific to the location type. For example,
      for an Airport the locationId is the airport's IATA code where as for a GeoPoint it
      is the concatentation of the latitude and longitude.
    required:
      - locationType
    properties:
      locationId:
        type: string
        description: |
          For an airport this will be the IATA code.
          For an area this is the area refId as stored in the Nezasa inventory
          For geo points the location ID is optional. The server will currently create
          an ID from the geo information for debugging and informational purposes. When the
          location is part of an update request, the server will ignore any value present here.
      locationType:
        type: string
        enum: *LocationType
      name:
        type: string
        description: |
          If defined this is a user-friendly name for this location.
          This attribute must be defined for all GeoPoint locations defined on a stop location
          in a RouteUpdateRequest
      coordinates:
        $ref: '#/definitions/Coordinates'
        description: |
          The geographic coordinates described by this location.
          This attribute must be defined for all GeoPoint locations as part of
          a RouteUpdateRequest.
      countryCode:
        type: string
        format: iso-3661-1
        description: |
          An ISO 3166-1 alpha-2 country code.
          This attribute must be defined for all GeoPoint locations defined on a stop location
          in a RouteUpdateRequest

  GeoLocation:
    type: object
    description: Defines a geographic point such as an airport or area
    required:
      - name
      - coordinates
    properties:
      name:
        type: string
      coordinates:
        $ref: '#/definitions/Coordinates'
      countryCode:
        type: string
        format: iso-3661-1
        description: an ISO 3166-1 alpha-2 country code
      locationType:
        type: string
        enum: *LocationType
      refId:
        type: string

  Coordinates:
    type: object
    required:
      - lat
      - lon
    properties:
      lat:
        type: number
        format: double
      lon:
        type: number
        format: double

  PriceInfo:
    type: object
    required:
      - packagePrice
      - packagePricePerPax
      - totalPrice
      - totalPricePerPax
    properties:
      packagePrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total package price in the localization currency
      packagePricePerPax:
        $ref: '#/definitions/MonetaryAmount'
        description: The package price per PAX in the localization currency
      externallyPaidCharges:
        $ref: '#/definitions/ExternallyPaidCharges'
        description: Charges to be paid externally, meaning not on our platform.
      totalPrice:
        description: the total amount to be paid, including the total amount to be paid in destination, converted to the package currency
        $ref: '#/definitions/MonetaryAmount'
      totalPricePerPax:
        description: the total amount to be paid, including the total amount to be paid in destination, converted to the package currency per pax
        $ref: '#/definitions/MonetaryAmount'

  TourOperatorSurcharge:
    type: object
    required:
      - name
      - value
    properties:
      name:
        type: string
      value:
        $ref: '#/definitions/MonetaryAmount'

  MonetaryAmount:
    type: object
    description: a container object for representing a monetary value in the system
    required:
      - amount
      - currency
    properties:
      amount:
        type: string
        description: The monetary value whereby the major and minor currency units are separated by a decimal (e.g. "29.95")
      currency:
        type: string
        description: The ISO-4217 currency code (e.g. EUR, USD, etc)
        format: iso-4217
      amountInMinorUnits:
        type: number
        format: int32
        description: The monetary value whereby the major and minor currency units are represented as an integer (e.g. 29.95 => 2995)
      currencyValueStringRounded:
        type: string
        description: The monetary value's user-friendly string representation, rounded to units (e.g. "EUR 30")

  ExternallyPaidCharge:
    type: object
    description: |
      Charges to be paid externally, meaning not on our platform. These are charges for
      things that we want to show the price on our platform, however, when the user makes
      the payment, we wouldn't charge for them. Instead, these charges are paid in the
      destination.
    required:
      - name
      - value
    properties:
      name:
        type: string
      value:
        description: the amount to be paid in the destination
        $ref: '#/definitions/MonetaryAmount'
      rentalCarChargeType:
        type: string
        description: Only defined for rental cars
        enum:
          - CrossBorder
          - OneWay
          - OutsideOpeningHours
      accommodationChargeType:
        type: string
        description: Only defined for accommodations
        enum:
          - AdditionalFees

  ExternallyPaidCharges:
    type: object
    description: |
      Charges to be paid externally, meaning not on our platform. These are charges for
      things that we want to show the price on our platform, however, when the user makes
      the payment, we wouldn't charge for them. Instead, these charges are paid in the
      destination.
    required:
      - externallyPaidCharges
      - totalPrice
      - unitPrice
    properties:
      externallyPaidCharges:
        type: array
        items:
          $ref: '#/definitions/ExternallyPaidCharge'
      totalPrice:
        description: the total amount to be paid in the destination
        $ref: '#/definitions/MonetaryAmount'
      unitPrice:
        description: the total amount to be paid in the destination per pax
        $ref: '#/definitions/MonetaryAmount'

  ExternalReference:
    type: object
    required:
      - id
      - system
    properties:
      id:
        type: string
      system:
        type: string

  PricingCoordinates:
    type: object
    description: container which houses the different variables used in computing a multi-dimensional product price
    required:
      - startDate
      - endDate
      - numAdults
      - numPax
    properties:
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      numAdults:
        type: number
        format: int32
        description: the number of adults
      childAges:
        type: array
        items:
          type: number
          format: int32
          description: an array of child ages for each child pax
      numPax:
        type: number
        format: int32
        description: a computed property reflecting the total number of PAX (adults + children)

  LicenceInfo:
    type: object
    description: Contains the licence data for a picture
    required:
      - attribution
    properties:
      attribution:
        type: string

  Picture:
    type: object
    description: Defines a view of our Picture model along with its descriptions
    properties:
      caption:
        type: string
      image:
        '$ref': '#/definitions/PictureItem'
      thumbnail:
        '$ref': '#/definitions/PictureItem'
      original:
        '$ref': '#/definitions/PictureItem'
      uncropped:
        '$ref': '#/definitions/PictureItem'
      licenceInfo:
        '$ref': '#/definitions/LicenceInfo'
      isExternalAsset:
        type: boolean

  PictureItem:
    type: object
    required:
      - name
      - url
      - width
      - height
    properties:
      name:
        type: string
      url:
        type: string
      width:
        type: integer
        format: int32
      height:
        type: integer
        format: int32
      sizeInKb:
        type: integer
        format: int64
    example:
      height: 599
      name: 'fw_wi4wwv6ybf3k.jpg'
      sizeInKb: 134
      url: 'https://s3-eu-west-1.amazonaws.com/nezasa-dev/pictures/fw_wi4wwv6ybf3k.jpg'
      width: 800

  BookingInfo:
    type: object
    description: |
      Describes booking information available in a component.
    required:
      - state
      - sourcingType
    properties:
      state:
        type: string
        enum:
          - Open
          - OnRequest
          - Booked
          - NonBookable
          - Cancelled
          - None
        description: 'state of the booking'
      bookingIdentifier:
        type: string
        enum:
          - Online
          - Offline
        description: 'reference identifier for the booking'
      sourcingType:
        type: string
        enum:
        description:
      consolidator:
        type: string
        description: 'consolidator being used to aggregate booking offers'
      consolidatorReference:
        type: string
        description: 'reference of the consolidator'
      supplier:
        type: string
        description: 'the specific supplier used by the consolidator for the booking'
      voucherUrls:
        type: array
        items:
          type: string
        description: |
          The public URLs to the vouchers

  FareFamily:
    type: object
    description: |
      Describes the Family Fare of the connection segment for transport connections.
    required:
      - name
    properties:
      name:
        type: string
        description: Name of the Family Fare
      iataCode:
        type: string
        description: Airport IATA code of the Family Fare
      icaoCode:
        type: string
        description: Airport ICAO code of the Family Fare

  TransportLocation:
    type: object
    description: |
      Describes a location that can be used as a starting point or an ending point for transport connections.
    properties:
      name:
        type: string
        description: localized name of the location
      refId:
        type: string
        description: Nezasa ID of the location
      iataCode:
        type: string
        description: IATA code of the location (if it exists)
      latitude:
        type: number
        format: double
        description: latitude of the location
      longitude:
        type: number
        format: double
        description: longitude of the location
      radius:
        type: number
        format: double
        description: in case the location is a circular area, radius around the point defined by the latitude and longitude of the location.
      timezone: *Timezone
      metropolitanArea:
        type: string
        description: if it exists, the 3 letter code of the metropolitan area containing the location
      city:
        type: string
        description: localized name of the city containing the location
      country:
        type: string
        description: localized name of the country containing the location
      countryCode:
        type: string
        description: 2 letter code of the country containing the location

  TransportItinerary:
    type: object
    description: |
      Describes a set of transport connections bookable together
    required:
      - id
      - salesPrice
      - connections
    properties:
      id:
        type: string
        description: A unique ID (only within the owning Itinerary) which identifies this transport component
      connectionLocalId:
        type: string
        description: A unique ID which identifies this connection
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total sales prices for all PAX (adults and children)
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net prices for all PAX (adults and children)
      netPriceSupplierCurrency:
        $ref: '#/definitions/MonetaryAmount'
        description: The total net price in the supplier's currency
      connections:
        type: array
        items:
          $ref: '#/definitions/TransportItineraryConnection'
        description: The list of connections describing the entire transport itinerary
      bookingInfo:
        $ref: '#/definitions/BookingInfo'
        description: The booking information for the component

  TransportItineraryConnection:
    type: object
    description: |
      Describes a set of connections composing a transport itinerary
    required:
      - departureLocation
      - arrivalLocation
      - departureDateTime
      - arrivalDateTime
      - segments
      - relevantTransportType
      - connectionType
    properties:
      departureLocation:
        $ref: '#/definitions/TransportLocation'
        description: |
          Departure transport location
      departureDateTime:
        type: string
        format: 'date-time'
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'departureLocation'
      arrivalLocation:
        $ref: '#/definitions/TransportLocation'
        description: |
          Arrival transport location
      arrivalDateTime:
        type: string
        format: 'date-time'
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'arrivalLocation'
      segments:
        type: array
        items:
          $ref: '#/definitions/TransportItineraryLeg'
        description: |
          A TransportItineraryConnection can be composed of several segments, each with their own departure and arrival
          airports and time.
      relevantTransportType:
        type: string
        description: |
          A connection can be composed of multiple segments using different means of transportation. This field just represents a "global" type of
          transport for the connection
        enum: *TransportType
      connectionType:
        type: string
        description: Type of the connection
        enum: *TransportConnectionType

  TransportItineraryLeg:
    type: object
    description: |
      Describes the legs in a transport connection
    required:
      - departureLocation
      - arrivalLocation
      - departureDateTime
      - arrivalDateTime
      - transportType
    properties:
      departureLocation:
        $ref: '#/definitions/TransportLocation'
        description: |
          Departure transport location
      departureDateTime:
        type: string
        format: 'date-time'
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'departureLocation'
      arrivalLocation:
        $ref: '#/definitions/TransportLocation'
        description: |
          Arrival transport location
      arrivalDateTime:
        type: string
        format: 'date-time'
        description: |
          A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6.
          This date-time value is given in the timezone defined by 'arrivalLocation'
      transportType:
        type: string
        description: Type of transportation of the segment.
        enum: *TransportType

  TimeOfDayRange:
    type: object
    description: time of day from, until
    properties:
      from:
        type: string
        format: 'partial-time'
        description: |
          A "partial-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6,
          indicating the earliest departure time for an air segment.

          The supported time is given in the local time of the airport and has the format
          "d{1,2}:d{1,2}". The seconds field is ignored as this level of resolution is not
          supported by flight providers.

      until:
        type: string
        format: 'partial-time'
        description: |
          A "partial-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6,
          indicating the latest arrival time for an air segment.

          The supported time is given in the local time of the airport and has the format
          "d{1,2}:d{1,2}". The seconds field is ignored as this level of resolution is not
          supported by flight providers.

  PriceRange:
    type: object
    properties:
      from:
        type: integer
        format: int32
        description: |
          Price is to be rounded to a whole number. If not defined, then there is
          no lower bound on the prices returned
      to:
        type: integer
        format: int32
        description: |
          Price is to be rounded to a whole number. If not defined, then there is
          no upper bound on the prices returned. This value must be greater than
          the given `from` attribute (if defined).

  TransportConnectionOfferRequest:
    type: object
    description: |
      Request for a list of offers for one transport connection
    required:
      - connectionType
    properties:
      connectionType:
        type: string
        description: Type of the connection
        enum: *TransportConnectionType
      connectionLocalId:
        type: string
        description: |
          For multicity transport connection, local ID of the connection
      startLocations:
        type: array
        items:
          $ref: '#/definitions/TransportLocation'
        description: |
          For Outbound connections, the starting location(s) for the connection to the itinerary. The parameter is forwarded to the third-party supplier API.
      endLocations:
        type: array
        items:
          $ref: '#/definitions/TransportLocation'
        description: |
          For Inbound connections, the ending location(s) for the connection from the itinerary. The parameter is forwarded to the third-party supplier API.
      arrivalTimeRange:
        $ref: '#/definitions/TimeOfDayRange'
      departureTimeRange:
        $ref: '#/definitions/TimeOfDayRange'

  TransportOfferRequest:
    type: object
    description: |
      Request for a list of offers for one or more transport connections.

      Whenever possible, the filter parameters are passed to the third-party supplier API because especiall for flights, the supplier APIs only return
      a limited amount of offers. GDS usually return 100 offers, Aerticket returns 350 offers, ...
    required:
      - connections
    properties:
      connections:
        type: array
        items:
          $ref: '#/definitions/TransportConnectionOfferRequest'
        description: |
          Definition of the connections covered by the search
      includeNearbyLocations:
        type: boolean
        description: |
          Include other nearby locations (airports, ...). This is applied to the start location of outbound connections and end location of inbound connections
          and applies a 100km radius around the locations defined.
      transportTypes:
        type: array
        description: |
          Type of transport to search for
        items:
          type: string
          enum: *TransportType
      transportClasses:
        type: array
        description: |
          Classes of transport to search for
        items:
          type: string
          enum:
            - First
            - Second
            - Business
            - Comfort
            - Economy
            - Premium
            - PremiumEconomy
      maxStopOver:
        type: integer
        format: int32
        description: |
          Maximum number of stops per connection. The parameter is forwarded to the third-party supplier API. Some supplier APIs don't only
          provide a filter for direct vs non-direct connections. In those cases, `maxStopOver` is accordingly mapped.
      priceRange:
        $ref: '#/definitions/PriceRange'
        description: Filter by sales price range. The filtering happens in the Nezasa backend.
      maxDurationInHours:
        type: integer
        format: int32
        description: The maximum travel duration in hours. Minimum value allowed is 0. The parameter is forwarded to the third-party supplier API.
      includedCarrierCodes:
        type: array
        items:
          type: string
          description: Two letter airline IATA codes
        description: List of airlines to include in the search. The parameter is forwarded to the third-party supplier API.
      excludedCarrierCodes:
        type: array
        items:
          type: string
          description: Two letter airline IATA codes
        description: List of airlines to exclude from the search.  The parameter is forwarded to the third-party supplier API.
      requireHoldBaggage:
        type: boolean
        description: |
          A value of true indicates that only fares containing at least one piece of hold baggage
          should be returned. If this attribute is not defined or has a value of false, then fares
          with or without baggage can be returned.

          Note that behavior of this attribute is dependent on the external provider. For Kiwi.com
          it currently has no effect as it is not possible to search for only flight itineraries
          which contain hold baggage (i.e. baggage included in the price). For Aerticket/SoftConEx
          toggling this value will effect the fares returned as a value of true will only return
          fares that contain hold baggage as part of the fare price.
      suppliers:
        type: array
        items:
          type: string
          enum:
            - AERTICKET
            - KIWI
            - SOFTCONEX
        description: |
          Set of suppliers used to constrain the offer search.

          The selected suppliers must be supported by the distribution channel configuration.
      combineOneWayFares:
        type: boolean
        description: |
          This flag indicates that one-way fares should be parsed and combined into round-trip offers.
          In other words, in addition to the normal round-trip fares, the backend will also return
          combined one-way fares as round-trips.

          If disabled, then the normal round-trip (RT) fares are searched.

  TransportOfferCancelPolicy:
    type: object
    required:
      - cancelType
    properties:
      cancelType:
        type: string
        description: Type of cancellation
        enum:
          - Free
          - FeeApplies
          - NonRefundable
      price:
        $ref: '#/definitions/MonetaryAmount'

  TransportOfferInsurance:
    type: object
    required:
      - insuranceName
    properties:
      insuranceName:
        type: string
        description: Localized name of the insurance
      price:
        $ref: '#/definitions/MonetaryAmount'

  TransportOfferFamilyFare:
    type: object
    required:
      - familyFareName
    properties:
      familyFareName:
        type: string
        description: Localized name of the family fare
      price:
        $ref: '#/definitions/MonetaryAmount'

  TransportConnectionSegmentBaggage:
    type: object
    required:
      - baggageType
      - included
    properties:
      baggageType:
        description: Type of baggage
        type: string
        enum:
          - Hold
          - Hand
          - PersonalItem
      included:
        type: boolean
      count:
        type: integer
        format: int32
      price:
        $ref: '#/definitions/MonetaryAmount'

  TransportConnectionSegmentPaxBaggage:
    type: object
    description: Distribution of bags for all the pax included in a transport connection.
    required:
      - paxRefId
    properties:
      paxRefId:
        type: string
        description: Unique ID of a pax
      baggage:
        type: array
        description: Description of a baggage
        items:
          $ref: '#/definitions/TransportConnectionSegmentBaggage'

  TransportConnectionSegment:
    type: object
    required:
      - startLocation
      - endLocation
      - startDateTime
      - endDateTime
      - transportType
      - carrier
      - carrierCode
      - carrierLogo
      - baggagePerPax
      - transportClass
      - transportClassText
      - segmentId
    properties:
      startLocation:
        description: Start location of the segment
        $ref: '#/definitions/TransportLocation'
      endLocation:
        description: End location of the segment
        $ref: '#/definitions/TransportLocation'
      startDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      transportType:
        type: string
        description: Type of transportation of the segment.
        enum: *TransportType
      carrier:
        type: string
        description: Name of the carrier of the segment
      carrierCode:
        type: string
        description: 2 letters code of the carrier of the segment
      carrierLogo:
        type: string
        description: URL to the logo of the carrier of the segment
      operatingCarrier:
        type: string
        description: Name of the operating carrier of the segment
      operatingCarrierCode:
        type: string
        description: 2 letters code of the operating carrier of the segment
      operatingCarrierLogo:
        type: string
        description: URL to the logo of the operating carrier of the segment
      transportNumber:
        type: string
        description: Identifier of the transport (Flight number, bus number, ...)
      operatingTransportNumber:
        type: string
        description: Identifier of the transport (Flight number, bus number, ...) defined by the operating carrier
      equipment:
        type: string
        description: Equipement used during the segment (type of plane, type of bus, ...)
      transportClass:
        type: string
        description: Class of the segment
        enum:
          - First
          - Second
          - Business
          - Comfort
          - Economy
          - Premium
          - PremiumEconomy
      transportClassText:
        type: string
        description: Localized name of the class of the segment
      segmentId:
        type: string
        description: Unique ID of the segment
      baggagePerPax:
        type: array
        description: Description of the baggage offers for each pax
        items:
          $ref: '#/definitions/TransportConnectionSegmentPaxBaggage'
      bookingClassCode:
        type: string
        description: The bookingClassCode attribute of transport segment. (eg "K")
      fareFamily:
        description: Family fare segment information
        $ref: '#/definitions/FareFamily'

  TransportConnectionOffer:
    type: object
    required:
      - connectionType
      - startLocation
      - endLocation
      - minutesToItinerary
      - startDateTime
      - endDateTime
      - offerId
      - offerGroupingKey
      - offerType
      - relevantTransportType
      - segments
      - duration
      - checkedBagsCount
      - cabinBagsCount
    properties:
      componentSource:
        type: string
        description: Supplier of the offer
      componentSourceType:
        type: string
        enum:
          - Private
          - Reseller
        description: The type of contract used to get the offer
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total sales price (including sales margins) of the offer
      unitSalesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Sales price per pax (including sales margins) of the offer
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total net price (not including sales margins) of the offer
      connectionType:
        type: string
        description: Type of the connection
        enum: *TransportConnectionType
      connectionLocalId:
        type: string
        description: |
          For multicity transport connections, local ID of the connection
      startLocation:
        $ref: '#/definitions/TransportLocation'
      endLocation:
        $ref: '#/definitions/TransportLocation'
      minutesToItinerary:
        type: integer
        format: int32
        description: For Outbound connection, minutes between the end of the transport connection and the beginning of the itinerary.
      duration:
        type: integer
        format: int32
        description: Duration of the connection (including the layovers) in minutes
      startDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      offerId:
        type: string
        description: Unique ID of the connection offer
      offerGroupingKey:
        type: string
        description: |
          Some providers have connections which look the same but have different IDs (eg SoftConEx).
          Such integrations can provide additional grouping key for the connection so we could filter similar offers.
      offerType:
        type: string
        enum:
          - Combined
          - Standalone
      relevantTransportType:
        type: string
        description: |
          A connection can be composed of multiple segments using different means of transportation. This field just represents a "global" type of
          transport for the connection
        enum: *TransportType
      segments:
        type: array
        description: Segments composing the transport connection.
        items:
          $ref: '#/definitions/TransportConnectionSegment'
      bookingCode:
        type: string
        description: Unique code defining the offer
      integrationArgs:
        type: array
        description: |
          Technical fields used to define an offer. This should be returned as is to TripBuilder when selecting an offer.
        items:
          $ref: '#/definitions/IntegrationArg'
      checkedBagsCount:
        type: integer
        format: int32
        description: Deprecated - Total number of included checked bags
      cabinBagsCount:
        type: integer
        format: int32
        description: Deprecated - Total number of included cabin bags
      checkedBagsPerPax:
        type: integer
        format: int32
        description: Total number of included checked bags. Not sent when this value is unknown.
      cabinBagsPerPax:
        type: integer
        format: int32
        description: Total number of included cabin bags. Not sent when this value is unknown.

  TransportOfferWarning:
    type: object
    description: |
      A warning to show to the customer
    required:
      - title
    properties:
      title:
        type: string
        description: Warning summary
      message:
        type: string
        description: Description of the warning message

  TransportOffer:
    type: object
    description: |
      Offer for one or more transport connection(s)
    required:
      - bookingCode
      - salesPrice
      - unitSalesPrice
      - connections
      - cancelPolicies
      - insurances
      - familyFares
      - componentSource
      - componentSourceType
      - totalDuration
      - warnings
      - isPlaceholder
      - fareTypes
    properties:
      componentSource:
        type: string
        description: Supplier of the offer
      bookingCode:
        type: string
        description: Unique code defining the offer
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total sales price (including sales margins) of the offer
      unitSalesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Sales price per pax (including sales margins) of the offer
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total net price (not including sales margins) of the offer
      connections:
        type: array
        description: Details of the connections contained in the offer
        items:
          $ref: '#/definitions/TransportConnectionOffer'
      cancelPolicies:
        type: array
        description: Cancellation policies attached to the offer
        items:
          $ref: '#/definitions/TransportOfferCancelPolicy'
      insurances:
        type: array
        description: Insurance policies attached to the offer
        items:
          $ref: '#/definitions/TransportOfferInsurance'
      familyFares:
        type: array
        description: Possible family fares attached to the offer
        items:
          $ref: '#/definitions/TransportOfferFamilyFare'
      totalDuration:
        type: integer
        format: int32
        description: Total duration of all connections (including layovers) in minutes
      vendor:
        type: string
        description: Deprecated - The actual offer provider (not WL, etc.)
      supplier:
        type: string
        description: The actual offer provider (not WL, etc.)
      componentSourceType:
        type: string
        enum:
          - Private
          - Reseller
        description: The type of contract used to get the offer
      warnings:
        type: array
        items:
          $ref: '#/definitions/TransportOfferWarning'
        description: The list of warnings for the offer
      isPlaceholder:
        type: boolean
        description: Whether this offer is not an actual flight, but a placeholder
      ticketTimeLimit:
        type: string
        format: 'date-time'
        description: The time by which the ticket must be issued to avoid the expiration of the fare quote
      surcharges:
        type: array
        description: |
          List of surcharges and types incurred for this offer
        items:
          $ref: '#/definitions/SurchargeOrTax'
      integrationArgs:
        type: array
        description: |
          Technical fields used to define an offer. This should be returned as is to TripBuilder when selecting an offer.
        items:
          $ref: '#/definitions/IntegrationArg'
      pnrCount:
        type: integer
        format: int32
        description: |
          This parameter represents the anticipated number of PNRs which this offer contains.
          This number is only anticipated, as it does not always correspond to the number of PNRs
          after the booking is created, in particular, when dealing with Kiwi.com. For Aerticket,
          this number should match the number of PNRs created after booking.

          In general a pnrCount of 1 indicates that offer represents a classic round-trip (RT)
          flight whereas multiple PNRs indicates that the offer is composed of different individual
          fares that will be be booked individually.
      fareTypes:
        type: array
        description: list of fare types
        items:
          type: string
          enum: *TransportFareType
  SurchargeOrTax:
    type: object
    description: |
      TODO surchage description
    required:
      - name
      - value
      - included
    properties:
      name:
        type: string
      value:
        description: |
          Additional taxes or fees which are applied to the product. These could already
          be included as part of the package price (in which case "included" is set to true)
          or excluded and must be paid externally from the booking (e.g. at the destination)
        $ref: '#/definitions/MonetaryAmount'
      chargeOrTaxType:
        type: string
        description: |
          - FlightAirportTax: The tax levied on passengers for taking off from an airport.
          - FlightAirTrafficTax: Direct aviation tax charged for all flights taking off from the airport.
          - FlightTotalTaxes: The sum of all included taxes incurred by the flight. If the backend provider
            does not provide a detailed tax breakdown, we try to fallback to at least retrieving the
            total surcharges or taxes applied to the fare.
        enum:
          - FlightAirportTax
          - FlightAirTrafficTax
          - FlightTotalTaxes

  IntegrationArg:
    type: object
    description: |
      Technical fields used to define an offer
    required:
      - key
      - value
    properties:
      key:
        type: string
      value:
        type: string

  TransportOfferResponse:
    type: object
    description: |
      Response for a list of offers for one or more transport connections
    required:
      - offers
      - notifications
    properties:
      currentSelection:
        description: If present, the currently selected offer
        $ref: '#/definitions/TransportOffer'
      offers:
        type: array
        description: |
          List of transport offers
        items:
          $ref: '#/definitions/TransportOffer'
      notifications:
        type: array
        description: |
          Warnings or errors encountered during the offers search
        items:
          $ref: '#/definitions/Notification'

  TransportUpdateSegmentBaggage:
    type: object
    required:
      - baggageType
      - included
    properties:
      baggageType:
        description: Type of baggage
        type: string
        enum:
          - Hold
          - Hand
          - PersonalItem
      included:
        type: boolean
        description: |
          true if the baggage should be included in the transport connection.
      count:
        type: integer
        format: int32
      price:
        $ref: '#/definitions/MonetaryAmount'

  TransportUpdateSegmentPaxBaggage:
    type: object
    description: Distribution of bags for all the pax included in a transport connection.
    required:
      - paxRefId
    properties:
      paxRefId:
        type: string
        description: Unique ID of a pax
      baggage:
        type: array
        description: Description of a baggage
        items:
          $ref: '#/definitions/TransportUpdateSegmentBaggage'

  TransportUpdateSegment:
    type: object
    description: |
      Update of a transport segment
    required:
      - startLocation
      - endLocation
      - startDateTime
      - endDateTime
      - transportType
      - carrier
      - carrierCode
      - carrierLogo
      - baggagePerPax
      - transportClass
      - segmentId
    properties:
      startLocation:
        description: Start location of the segment
        $ref: '#/definitions/TransportLocation'
      endLocation:
        description: End location of the segment
        $ref: '#/definitions/TransportLocation'
      startDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      transportType:
        type: string
        description: Type of transportation of the segment.
        enum: *TransportType
      carrier:
        type: string
        description: Name of the carrier of the segment
      carrierCode:
        type: string
        description: 2 letters code of the carrier of the segment
      carrierLogo:
        type: string
        description: URL to the logo of the carrier of the segment
      operatingCarrier:
        type: string
        description: Name of the operating carrier of the segment
      operatingCarrierCode:
        type: string
        description: 2 letters code of the operating carrier of the segment
      operatingCarrierLogo:
        type: string
        description: URL to the logo of the operating carrier of the segment
      transportNumber:
        type: string
        description: Identifier of the transport (Flight number, bus number, ...)
      operatingTransportNumber:
        type: string
        description: Identifier of the transport (Flight number, bus number, ...) defined by the operating carrier
      equipment:
        type: string
        description: Equipement used during the segment (type of plane, type of bus, ...)
      transportClass:
        type: string
        description: Class of the segment
        enum:
          - First
          - Second
          - Business
          - Comfort
          - Economy
          - Premium
          - PremiumEconomy
      segmentId:
        type: string
        description: Unique ID of the segment
      baggagePerPax:
        type: array
        description: Description of the baggage offers for each pax
        items:
          $ref: '#/definitions/TransportUpdateSegmentPaxBaggage'
      bookingClassCode:
        type: string
        description: The bookingClassCode attribute of transport segment. (eg "K")

  TransportConnectionUpdate:
    type: object
    description: |
      Update of a transport connection
    required:
      - connectionType
      - startLocation
      - endLocation
      - startDateTime
      - endDateTime
      - offerId
      - offerType
      - segments
    properties:
      componentSource:
        type: string
        description: Supplier of the offer
      componentSourceType:
        type: string
        enum:
          - Private
          - Reseller
        description: The type of contract used to get the offer
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total sales price (including sales margins) of the offer
      unitSalesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Sales price per pax (including sales margins) of the offer
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total net price (not including sales margins) of the offer
      connectionType:
        type: string
        description: Type of the connection
        enum: *TransportConnectionType
      connectionLocalId:
        type: string
        description: |
          For multicity transport connections, local ID of the connection
      startLocation:
        $ref: '#/definitions/TransportLocation'
      endLocation:
        $ref: '#/definitions/TransportLocation'
      startDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDateTime:
        type: string
        format: 'date-time'
        description: A "date-time" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      offerId:
        type: string
        description: Unique ID of the connection offer
      offerType:
        type: string
        enum:
          - Combined
          - Standalone
      segments:
        type: array
        description: Segments composing the transport connection.
        items:
          $ref: '#/definitions/TransportUpdateSegment'
      bookingCode:
        type: string
        description: Unique code defining the offer
      integrationArgs:
        type: array
        description: |
          Technical fields used to define an offer. This should be returned as is to TripBuilder when selecting an offer.
        items:
          $ref: '#/definitions/IntegrationArg'

  TransportOfferUpdateRequest:
    type: object
    description: |
      Request to update a transport component
    required:
      - bookingCode
      - salesPrice
      - unitSalesPrice
      - connections
      - cancelPolicies
      - insurances
      - familyFares
      - componentSource
      - componentSourceType
    properties:
      componentSource:
        type: string
        description: Supplier of the offer
      bookingCode:
        type: string
        description: Unique code defining the offer
      vendor:
        type: string
        description: Deprecated - The actual offer provider (not WL, etc.)
      supplier:
        type: string
        description: The actual offer provider (not WL, etc.)
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total sales price (including sales margins) of the offer
      unitSalesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Sales price per pax (including sales margins) of the offer
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: Total net price (not including sales margins) of the offer
      connections:
        type: array
        description: Details of the connections contained in the offer
        items:
          $ref: '#/definitions/TransportConnectionUpdate'
      cancelPolicies:
        type: array
        description: Cancellation policies attached to the offer
        items:
          $ref: '#/definitions/TransportOfferCancelPolicy'
      insurances:
        type: array
        description: Insurance policies attached to the offer
        items:
          $ref: '#/definitions/TransportOfferInsurance'
      familyFares:
        type: array
        description: Possible family fares attached to the offer
        items:
          $ref: '#/definitions/TransportOfferFamilyFare'
      fareTypes:
        type: array
        description: Fare types attached to the offer
        items:
          type: string
      componentSourceType:
        type: string
        enum:
          - Private
          - Reseller
        description: The type of contract used to get the offer
      isPlaceholder:
        type: boolean
        description: Whether the offer is a placeholder
      ticketTimeLimit:
        type: string
        format: date-time
        description: The ticketTimeLimit from the offers response as is.
      surcharges:
        type: array
        description: |
          List of surcharges and types incurred for this offer
        items:
          $ref: '#/definitions/SurchargeOrTax'
      integrationArgs:
        type: array
        description: |
          Technical fields used to define an offer. This should be returned as is to TripBuilder when selecting an offer.
        items:
          $ref: '#/definitions/IntegrationArg'

  TransportLocationsResponse:
    type: object
    description: Container of a list of transport locations
    required:
      - locations
    properties:
      locations:
        type: array
        description: Locations matching the keywords sent in the request
        items:
          $ref: '#/definitions/TransportLocation'

  TransportSegmentBagsUpdateRequest:
    type: object
    description: |
      Baggage update request for a specific segment of a transport connection.
    required:
      - segmentId
      - baggagePerPax
    properties:
      segmentId:
        type: string
        description: Nezasa local ID of the segment included in the transport connection being updated.
      baggagePerPax:
        type: array
        description: Definition of the bags included for all the pax of the transport segment.
        items:
          $ref: '#/definitions/TransportUpdateSegmentPaxBaggage'

  TransportConnectionBagsUpdateRequest:
    type: object
    description: Baggage update request for a specific transport connection.
    required:
      - connectionType
      - connectionLocalId
      - segments
    properties:
      connectionType:
        type: string
        description: Type of the transport connection
        enum: *TransportConnectionType
      connectionLocalId:
        type: string
        description: Nezasa local ID of the transport connection to update. This can be found in the Itinerary View.
      segments:
        type: array
        description: Definition of the bags included for all the segments and all the pax of the transport connection.
        items:
          $ref: '#/definitions/TransportSegmentBagsUpdateRequest'

  TransportBagsUpdateRequest:
    type: object
    required:
      - updates
    properties:
      updates:
        type: array
        description: |
          Array of connections to update. Each element defines a connection and the bags included for all pax and segments of this connection.
        items:
          $ref: '#/definitions/TransportConnectionBagsUpdateRequest'

  TransportGeneralRulesResponse:
    type: object
    required:
      - rules
    properties:
      rules:
        type: string
        description: |
          Plain text information from provider. (eg fare rules from SoftConEx)

  TransportPullPnrRequest:
    type: object
    required:
      - pnrLocator
    properties:
      pnrLocator:
        type: string
        description: |
          Also called the file key, it uniquely identifies the PNR in a specific
          reservation system
      reservationSystem:
        enum: *TransportPnrReservationSystem
      lastName:
        type: string
        description: |
          The last name of one of the pax. Can be used together with the pnrLocator to identify a booking
      netPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The net price to use for the imported transport component. This value
          will override the value sent by the backend system
      salesPrice:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The sales price to use for the imported transport component. This value
          will override the value sent by the backend system
      surcharge:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          Extra taxes added to the price
      supplierName:
        type: string
        description: |
          The supplier that organizes and takes over the responsibility of a component
      contactRefId:
        type: string
        description: |
          The contact refId of the supplier that organizes and takes over the responsibility of a component
      aerAgencyNumber:
        type: string
        description: |
          The AER specific agency number which should be used to login into Aerticket
          and perform the Pull-PNR call. Note that if this value is present it will override
          any value defined on the travel agency's external reference.

          Note that this value is only allowed to be defined by Nezasa user and will be
          silently discarded if the authenticated user does not possess the Nezasa role.
      paxSelection:
        type: array
        description: |
          The list of PAX IDs on the itinerary to associate paxes from this PNR to itinerary (eg. pax-1, pax-2, pax-3).
          If present, pnrPaxSelection must be present as well and both must have the same number of entries.
          The n-th entry of this list will be associated with the n-th entry of pnrPaxSelection.
        items:
          type: string
      pnrPaxSelection:
        type: array
        description: |
          The list of PAX indices on the PNR to associate paxes from this PNR to itinerary (eg. 2, 1, 3)
          If present, paxSelection must be present as well and both must have the same number of entries.
          The n-th entry of this list will be associated with the n-th entry of paxSelection.
        items:
          type: integer

    example:
      pnrLocator: 'TN8GUU'
      reservationSystem: CRS_AMADEUS
      netPrice:
        amount: '1022.91'
        currency: 'EUR'
      salesPrice:
        amount: '1200.30'
        currency: 'EUR'
      supplierName: 'Nezasa'
      aerAgencyNumber: '118612'
      paxSelection: ['pax-1', 'pax-2']

  TransportClassUpgradeOffersRequest:
    type: object
    required:
      - transportClass
      - offers
    properties:
      transportClass:
        type: string
        enum:
          - First
          - Business
          - Economy
          - Premium
          - PremiumEconomy
      offers:
        type: array
        items:
          $ref: '#/definitions/TransportOfferUpdateRequest'
        description: |
          The list of transport offers to update to use for updating the itinerary.
          Each offer will correspond to a different set of transport components since
          we can have multiple flights attached to the itinerary.

  TransportClassUpgradeOffersResponse:
    type: object
    required:
      - upgradeOffers
    properties:
      upgradeOffers:
        type: array
        items:
          $ref: '#/definitions/TransportClassUpgradeOffers'

  TransportClassUpgradeOffers:
    type: object
    required:
      - transportClass
      - transportClassText
      - offers
      - salesPriceDifference
      - salesPriceDifferencePerPax
      - salesPriceDifferenceText
      - salesPriceDifferencePerPaxText
      - isSelected
    properties:
      transportClass:
        type: string
        enum:
          - First
          - Business
          - Economy
          - Premium
          - PremiumEconomy
      transportClassText:
        type: string
        description: Localized name of the class of the segment
      offers:
        type: array
        items:
          $ref: '#/definitions/TransportOffer'
        description: |
          The list of transport offers corresponding to the defined transport class.
          Each offer will correspond to a different set of transport components since
          we can have multiple flights attached to the itinerary.
      isSelected:
        type: boolean
        description: |
          If true, this set of upgrade offers refer to the currently set of transport
          components found on the itinerary
      salesPriceDifference:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total sales price difference w.r.t. the selected set of transports. For example,
          if this set of upgrade offers refers to the selected set of transports, then the
          difference is 0.
      salesPriceDifferencePerPax:
        $ref: '#/definitions/MonetaryAmount'
        description: |
          The total sales price difference per pax w.r.t. the selected set of transports. For example,
          if this set of upgrade offers refers to the selected set of transports, then the
          difference is 0.
      salesPriceDifferenceText:
        type: string
        description: |
          The signed `salesPriceDifference` value as text. For example, if the difference is minus USD 200
          this has `USD -200.00`.
      salesPriceDifferencePerPaxText:
        type: string
        description: |
          The signed `salesPriceDifferencePerPax` value as text. For example, if the difference is minus USD 200
          this has `USD -200.00`.

  RemarksWrapper:
    type: object
    properties:
      remarks:
        type: string
        description: |
          Remarks text (markdown syntax supported)

  UpgradeReferences:
    type: object
    properties:
      templatesOnly:
        type: boolean
        description: |
          If true, only template references are updated, products stay the same.
          Defaults to false if not sent.

  RecreateComponents:
    type: object
    required:
      - serviceLevel
    properties:
      serviceLevel:
        type: string
        description: |
          Recreates the accommodation components according to the passed service level.

  ItineraryManagedServiceLevelsResponse:
    type: object
    required:
      - serviceLevels
    properties:
      serviceLevels:
        type: array
        items:
          $ref: '#/definitions/ManagedServiceLevelWithPrice'

  ManagedServiceLevelWithPrice:
    type: object
    required:
      - serviceLevel
      - priceInfo
      - isSelected
    properties:
      serviceLevel:
        $ref: '#/definitions/ManagedServiceLevel'
      priceInfo:
        $ref: '#/definitions/PriceInfo'
      isSelected:
        type: boolean

  ManagedServiceLevel:
    type: object
    required:
      - refId
      - name
    properties:
      refId:
        type: string
      name:
        type: string
      level:
        type: string
        enum:
          - Level1
          - Level2
          - Level3
          - Level4
          - Level5

  UpsellItemTravelDocsOffers:
    type: object
    required:
      - offers
    properties:
      offers:
        type: array
        items:
          $ref: '#/definitions/UpsellItemTravelDocsOffer'

  UpsellItemTravelDocsOffer:
    type: object
    required:
      - productName
      - productRefId
      - serviceCategories
    properties:
      productName:
        type: string
        description: |
          Upsell Item offer product name
      description:
        type: string
        description: Description of upsell product
      productRefId:
        type: string
        description: |
          Upsell Item offer product reference Id
      serviceCategories:
        type: array
        items:
          $ref: '#/definitions/UpsellItemServiceCategoryTravelDocsOffer'
        description: |
          Upsell Item offer product service categories

  UpsellItemServiceCategoryTravelDocsOffer:
    type: object
    required:
      - name
      - refId
    properties:
      name:
        type: string
        description: |
          Upsell Item product offer service category name
      refId:
        type: string
        description: |
          Upsell Item product offer service category reference Id
      price:
        $ref: '#/definitions/MonetaryAmount'
        description: The net price set for the ad-hoc generic component
      displayInTravelDocs:
        type: boolean
        description: |
          Whether or not to display this offer in travel documentation

  ItineraryAvailabilities:
    type: object
    required:
      - useStartDateRange
      - availabilities
    properties:
      useStartDateRange:
        type: boolean
      availabilities:
        type: array
        items:
          $ref: '#/definitions/ItineraryAvailability'

  ItineraryAvailability:
    type: object
    required:
      - startDate
      - endDate
    properties:
      startDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
      endDate:
        type: string
        description: A "full-date" as defined by https://datatracker.ietf.org/doc/html/rfc3339#section-5.6
